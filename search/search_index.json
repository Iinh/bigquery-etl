{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"mozdata/account_ecosystem/","text":"aet_clients_daily One row per user per service per day, showing metrics across services. The user_id and client_id are directly related to the ecosystem_user_id and ecosystem_client_id primitive identifiers for Account Ecosystem Telemetry, but are abstracted to prevent fingerprinting and to provide continuity across user password reset events. In this view, we are guaranteed that a logical user is represented by a consistent user_id over time. For rows representing client telemetry, this view looks up user_id at runtime based on client_id so that we can have user_id values present for any client that has ever logged in to FxA, even for older rows before the first login. Friendly name: AET Clients Daily Table Source | Metadata Source | View Source","title":"account_ecosystem"},{"location":"mozdata/account_ecosystem/#aet_clients_daily","text":"One row per user per service per day, showing metrics across services. The user_id and client_id are directly related to the ecosystem_user_id and ecosystem_client_id primitive identifiers for Account Ecosystem Telemetry, but are abstracted to prevent fingerprinting and to provide continuity across user password reset events. In this view, we are guaranteed that a logical user is represented by a consistent user_id over time. For rows representing client telemetry, this view looks up user_id at runtime based on client_id so that we can have user_id values present for any client that has ever logged in to FxA, even for older rows before the first login. Friendly name: AET Clients Daily Table Source | Metadata Source | View Source","title":"aet_clients_daily"},{"location":"mozdata/activity_stream/","text":"impression_stats_by_experiment Table Source | View Source tile_id_types Table Source | View Source impression_stats_flat Table Source | View Source","title":"activity_stream"},{"location":"mozdata/activity_stream/#impression_stats_by_experiment","text":"Table Source | View Source","title":"impression_stats_by_experiment"},{"location":"mozdata/activity_stream/#tile_id_types","text":"Table Source | View Source","title":"tile_id_types"},{"location":"mozdata/activity_stream/#impression_stats_flat","text":"Table Source | View Source","title":"impression_stats_flat"},{"location":"mozdata/amo_dev/","text":"amo_stats_dau Table Source | View Source amo_stats_dau_v2 Reduced stats table for dev and stage versions of the AMO service. Friendly name: AMO Stats DAU dev/stage Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source amo_stats_installs_v3 Reduced daily installs table for dev and stage versions of the AMO service. Friendly name: AMO Installs dev/stage Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source amo_stats_installs Table Source | View Source | Metadata Source","title":"amo_dev"},{"location":"mozdata/amo_dev/#amo_stats_dau","text":"Table Source | View Source","title":"amo_stats_dau"},{"location":"mozdata/amo_dev/#amo_stats_dau_v2","text":"Reduced stats table for dev and stage versions of the AMO service. Friendly name: AMO Stats DAU dev/stage Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"amo_stats_dau_v2"},{"location":"mozdata/amo_dev/#amo_stats_installs_v3","text":"Reduced daily installs table for dev and stage versions of the AMO service. Friendly name: AMO Installs dev/stage Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"amo_stats_installs_v3"},{"location":"mozdata/amo_dev/#amo_stats_installs","text":"Table Source | View Source | Metadata Source","title":"amo_stats_installs"},{"location":"mozdata/amo_prod/","text":"amo_stats_dau Table Source | View Source fenix_addons_by_client_v1 Clients_daily-like table on top of the various Firefox for Android channels that records only the dimensions and addon info necessary to power the daily amo_stats_dau_v2 query. Friendly name: Fenix addons by client Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source amo_stats_dau_v2 Daily user statistics to power addons.mozilla.org stats pages. See bug 1572873. Each row in this table represents a particular addon on a particular day and provides all the information needed to populate the various \"Daily Users\" plots for the AMO stats dashboard. Friendly name: AMO Stats DAU Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source desktop_addons_by_client_v1 Clients_daily-like table that records only the dimensions and addon info necessary to power daily the amo_stats_dau_v2 query. Friendly name: Desktop addons by client Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source amo_stats_installs_v3 Daily install statistics to power addons.mozilla.org stats pages. See bug 1654330. Note that this table uses a hashed_addon_id defined as TO_HEX(SHA256(addon_id)) because the underlying event pings have limitations on length of properties attached to events and addon_id values are sometimes too long. The AMO stats application looks up records in this table based on the hashed_addon_id. Friendly name: AMO Stats DAU Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source amo_stats_installs Table Source | View Source | Metadata Source","title":"amo_prod"},{"location":"mozdata/amo_prod/#amo_stats_dau","text":"Table Source | View Source","title":"amo_stats_dau"},{"location":"mozdata/amo_prod/#fenix_addons_by_client_v1","text":"Clients_daily-like table on top of the various Firefox for Android channels that records only the dimensions and addon info necessary to power the daily amo_stats_dau_v2 query. Friendly name: Fenix addons by client Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"fenix_addons_by_client_v1"},{"location":"mozdata/amo_prod/#amo_stats_dau_v2","text":"Daily user statistics to power addons.mozilla.org stats pages. See bug 1572873. Each row in this table represents a particular addon on a particular day and provides all the information needed to populate the various \"Daily Users\" plots for the AMO stats dashboard. Friendly name: AMO Stats DAU Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"amo_stats_dau_v2"},{"location":"mozdata/amo_prod/#desktop_addons_by_client_v1","text":"Clients_daily-like table that records only the dimensions and addon info necessary to power daily the amo_stats_dau_v2 query. Friendly name: Desktop addons by client Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"desktop_addons_by_client_v1"},{"location":"mozdata/amo_prod/#amo_stats_installs_v3","text":"Daily install statistics to power addons.mozilla.org stats pages. See bug 1654330. Note that this table uses a hashed_addon_id defined as TO_HEX(SHA256(addon_id)) because the underlying event pings have limitations on length of properties attached to events and addon_id values are sometimes too long. The AMO stats application looks up records in this table based on the hashed_addon_id. Friendly name: AMO Stats DAU Schedule: daily Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"amo_stats_installs_v3"},{"location":"mozdata/amo_prod/#amo_stats_installs","text":"Table Source | View Source | Metadata Source","title":"amo_stats_installs"},{"location":"mozdata/default_browser_agent/","text":"default_browser Table Source | View Source","title":"default_browser_agent"},{"location":"mozdata/default_browser_agent/#default_browser","text":"Table Source | View Source","title":"default_browser"},{"location":"mozdata/firefox_accounts/","text":"fxa_log_performance_events Table Source | View Source fxa_amplitude_email_clicks Table Source | View Source fxa_log_content_events Table Source | View Source sync_send_tab_export Table Source | View Source fxa_content_auth_events Table Source | View Source fxa_users_services_daily Table Source | View Source fxa_users_last_seen Table Source | View Source fxa_all_events Table Source | View Source fxa_log_device_command_events Table Source | View Source fxa_amplitude_export Table Source | View Source fxa_log_auth_events Table Source | View Source fxa_content_auth_oauth_events Table Source | View Source","title":"firefox_accounts"},{"location":"mozdata/firefox_accounts/#fxa_log_performance_events","text":"Table Source | View Source","title":"fxa_log_performance_events"},{"location":"mozdata/firefox_accounts/#fxa_amplitude_email_clicks","text":"Table Source | View Source","title":"fxa_amplitude_email_clicks"},{"location":"mozdata/firefox_accounts/#fxa_log_content_events","text":"Table Source | View Source","title":"fxa_log_content_events"},{"location":"mozdata/firefox_accounts/#sync_send_tab_export","text":"Table Source | View Source","title":"sync_send_tab_export"},{"location":"mozdata/firefox_accounts/#fxa_content_auth_events","text":"Table Source | View Source","title":"fxa_content_auth_events"},{"location":"mozdata/firefox_accounts/#fxa_users_services_daily","text":"Table Source | View Source","title":"fxa_users_services_daily"},{"location":"mozdata/firefox_accounts/#fxa_users_last_seen","text":"Table Source | View Source","title":"fxa_users_last_seen"},{"location":"mozdata/firefox_accounts/#fxa_all_events","text":"Table Source | View Source","title":"fxa_all_events"},{"location":"mozdata/firefox_accounts/#fxa_log_device_command_events","text":"Table Source | View Source","title":"fxa_log_device_command_events"},{"location":"mozdata/firefox_accounts/#fxa_amplitude_export","text":"Table Source | View Source","title":"fxa_amplitude_export"},{"location":"mozdata/firefox_accounts/#fxa_log_auth_events","text":"Table Source | View Source","title":"fxa_log_auth_events"},{"location":"mozdata/firefox_accounts/#fxa_content_auth_oauth_events","text":"Table Source | View Source","title":"fxa_content_auth_oauth_events"},{"location":"mozdata/internet_outages/","text":"global_outages_v1 This contains a set aggregated metrics that correlate to internet outages for different countries in the world. The dataset contains the following fields: - country : the Country code of the client. - city : the City name (only for cities with a population >= 15000, 'unknown' otherwise). - datetime : the date and the time (truncated to hour) the data was submitted by the client. - proportion_undefined : the proportion of users who failed to send telemetry for a reason that was not listed in the other cases. - proportion_timeout : the proportion of users that had their connection timeout while uploading telemetry ( after 90s, in Firefox Desktop ). - proportion_abort : the proportion of users that had their connection terminated by the client (for example, terminating open connections before shutting down). - proportion_unreachable : the proportion of users that failed to upload telemetry because the server was not reachable (e.g. because the host was not reachable, proxy problems or OS waking up after a suspension). - proportion_terminated : the proportion of users that had their connection terminated internally by the networking code. - proportion_channel_open : the proportion of users for which the upload request was terminated immediately, by the client, because of a Necko internal error. - avg_dns_success_time : the average time it takes for a successful DNS resolution, in milliseconds. - missing_dns_success : counts how many sessions did not report the DNS_LOOKUP_TIME histogram. - avg_dns_failure_time : the average time it takes for an unsuccessful DNS resolution, in milliseconds. - missing_dns_failure : counts how many sessions did not report the DNS_FAILED_LOOKUP_TIME histogram. - count_dns_failure : the average count of unsuccessful DNS resolutions reported. - ssl_error_prop : the proportion of users that reported an error through the SSL_CERT_VERIFICATION_ERRORS histogram. - avg_tls_handshake_time : the average time after the TCP SYN to ready for HTTP, in milliseconds. Caveats with the data: As with any observational data, there are many caveats and interpretation must be done carefully. Below is a list of issues we have considered, but it is not exhaustive. - Firefox users are not representative of the general population in their region. - Users can experience multiple types of failures and so the proportions are not summable. For example, if 2.4% of clients had a timeout and 2.6% of clients had eUnreachable that doesn't necessarily mean that 5.0% of clients had a timeout or a eUnreachable - Geographical data is based on IPGeo databases. These databases are imperfect, so some activity may be attributed to the wrong location. Further, proxy and VPN usage can create geo-attribution errors. Friendly name: Internet Outages Schedule: Owners: aplacitelli@mozilla.com sguha@mozilla.com Table Source | Metadata Source","title":"internet_outages"},{"location":"mozdata/internet_outages/#global_outages_v1","text":"This contains a set aggregated metrics that correlate to internet outages for different countries in the world. The dataset contains the following fields: - country : the Country code of the client. - city : the City name (only for cities with a population >= 15000, 'unknown' otherwise). - datetime : the date and the time (truncated to hour) the data was submitted by the client. - proportion_undefined : the proportion of users who failed to send telemetry for a reason that was not listed in the other cases. - proportion_timeout : the proportion of users that had their connection timeout while uploading telemetry ( after 90s, in Firefox Desktop ). - proportion_abort : the proportion of users that had their connection terminated by the client (for example, terminating open connections before shutting down). - proportion_unreachable : the proportion of users that failed to upload telemetry because the server was not reachable (e.g. because the host was not reachable, proxy problems or OS waking up after a suspension). - proportion_terminated : the proportion of users that had their connection terminated internally by the networking code. - proportion_channel_open : the proportion of users for which the upload request was terminated immediately, by the client, because of a Necko internal error. - avg_dns_success_time : the average time it takes for a successful DNS resolution, in milliseconds. - missing_dns_success : counts how many sessions did not report the DNS_LOOKUP_TIME histogram. - avg_dns_failure_time : the average time it takes for an unsuccessful DNS resolution, in milliseconds. - missing_dns_failure : counts how many sessions did not report the DNS_FAILED_LOOKUP_TIME histogram. - count_dns_failure : the average count of unsuccessful DNS resolutions reported. - ssl_error_prop : the proportion of users that reported an error through the SSL_CERT_VERIFICATION_ERRORS histogram. - avg_tls_handshake_time : the average time after the TCP SYN to ready for HTTP, in milliseconds. Caveats with the data: As with any observational data, there are many caveats and interpretation must be done carefully. Below is a list of issues we have considered, but it is not exhaustive. - Firefox users are not representative of the general population in their region. - Users can experience multiple types of failures and so the proportions are not summable. For example, if 2.4% of clients had a timeout and 2.6% of clients had eUnreachable that doesn't necessarily mean that 5.0% of clients had a timeout or a eUnreachable - Geographical data is based on IPGeo databases. These databases are imperfect, so some activity may be attributed to the wrong location. Further, proxy and VPN usage can create geo-attribution errors. Friendly name: Internet Outages Schedule: Owners: aplacitelli@mozilla.com sguha@mozilla.com Table Source | Metadata Source","title":"global_outages_v1"},{"location":"mozdata/introduction/","text":"mozdata is the main GCP project that includes datasets for user analysis as of February 2021. This project is filled with views that reference underlying tables in moz-fx-data-shared-prod . Users can use data tools like STMO to issue queries in this project.","title":"Introduction"},{"location":"mozdata/messaging_system/","text":"onboarding_exact_mau28_by_dimensions Table Source | View Source onboarding_retention_events_amplitude Table Source | View Source snippets_users_daily Table Source | View Source onboarding_events_amplitude Table Source | View Source cfr_users_last_seen Table Source | View Source cfr_users_daily Table Source | View Source onboarding_users_last_seen Table Source | View Source snippets_users_last_seen Table Source | View Source snippets_exact_mau28_by_dimensions Table Source | View Source cfr_exact_mau28_by_dimensions Table Source | View Source onboarding_users_daily Table Source | View Source","title":"messaging_system"},{"location":"mozdata/messaging_system/#onboarding_exact_mau28_by_dimensions","text":"Table Source | View Source","title":"onboarding_exact_mau28_by_dimensions"},{"location":"mozdata/messaging_system/#onboarding_retention_events_amplitude","text":"Table Source | View Source","title":"onboarding_retention_events_amplitude"},{"location":"mozdata/messaging_system/#snippets_users_daily","text":"Table Source | View Source","title":"snippets_users_daily"},{"location":"mozdata/messaging_system/#onboarding_events_amplitude","text":"Table Source | View Source","title":"onboarding_events_amplitude"},{"location":"mozdata/messaging_system/#cfr_users_last_seen","text":"Table Source | View Source","title":"cfr_users_last_seen"},{"location":"mozdata/messaging_system/#cfr_users_daily","text":"Table Source | View Source","title":"cfr_users_daily"},{"location":"mozdata/messaging_system/#onboarding_users_last_seen","text":"Table Source | View Source","title":"onboarding_users_last_seen"},{"location":"mozdata/messaging_system/#snippets_users_last_seen","text":"Table Source | View Source","title":"snippets_users_last_seen"},{"location":"mozdata/messaging_system/#snippets_exact_mau28_by_dimensions","text":"Table Source | View Source","title":"snippets_exact_mau28_by_dimensions"},{"location":"mozdata/messaging_system/#cfr_exact_mau28_by_dimensions","text":"Table Source | View Source","title":"cfr_exact_mau28_by_dimensions"},{"location":"mozdata/messaging_system/#onboarding_users_daily","text":"Table Source | View Source","title":"onboarding_users_daily"},{"location":"mozdata/monitoring/","text":"deletion_request_volume Table Source | View Source structured_distinct_docids Table Source | View Source shredder_progress Table Source | View Source structured_missing_columns Table Source | View Source bigquery_etl_scheduled_query_usage Table Source | View Source column_size Table Source | View Source average_ping_sizes Table Source | View Source telemetry_missing_columns Table Source | View Source telemetry_distinct_docids Table Source | View Source schema_error_counts Table Source | View Source stable_table_sizes Table Source | View Source structured_error_counts Table Source | View Source bigquery_etl_scheduled_queries_cost Table Source | View Source structured_detailed_error_counts Table Source | View Source document_sample_nonprod Table Source | View Source","title":"monitoring"},{"location":"mozdata/monitoring/#deletion_request_volume","text":"Table Source | View Source","title":"deletion_request_volume"},{"location":"mozdata/monitoring/#structured_distinct_docids","text":"Table Source | View Source","title":"structured_distinct_docids"},{"location":"mozdata/monitoring/#shredder_progress","text":"Table Source | View Source","title":"shredder_progress"},{"location":"mozdata/monitoring/#structured_missing_columns","text":"Table Source | View Source","title":"structured_missing_columns"},{"location":"mozdata/monitoring/#bigquery_etl_scheduled_query_usage","text":"Table Source | View Source","title":"bigquery_etl_scheduled_query_usage"},{"location":"mozdata/monitoring/#column_size","text":"Table Source | View Source","title":"column_size"},{"location":"mozdata/monitoring/#average_ping_sizes","text":"Table Source | View Source","title":"average_ping_sizes"},{"location":"mozdata/monitoring/#telemetry_missing_columns","text":"Table Source | View Source","title":"telemetry_missing_columns"},{"location":"mozdata/monitoring/#telemetry_distinct_docids","text":"Table Source | View Source","title":"telemetry_distinct_docids"},{"location":"mozdata/monitoring/#schema_error_counts","text":"Table Source | View Source","title":"schema_error_counts"},{"location":"mozdata/monitoring/#stable_table_sizes","text":"Table Source | View Source","title":"stable_table_sizes"},{"location":"mozdata/monitoring/#structured_error_counts","text":"Table Source | View Source","title":"structured_error_counts"},{"location":"mozdata/monitoring/#bigquery_etl_scheduled_queries_cost","text":"Table Source | View Source","title":"bigquery_etl_scheduled_queries_cost"},{"location":"mozdata/monitoring/#structured_detailed_error_counts","text":"Table Source | View Source","title":"structured_detailed_error_counts"},{"location":"mozdata/monitoring/#document_sample_nonprod","text":"Table Source | View Source","title":"document_sample_nonprod"},{"location":"mozdata/mozilla_vpn/","text":"add_device_events Table Source | View Source waitlist Table Source | View Source survey_market_fit Table Source | View Source survey_product_quality Table Source | View Source survey_intercept_q3 Table Source | View Source users Table Source | View Source survey_recommend Table Source | View Source login_flows Table Source | View Source protected Table Source | View Source survey_cancellation_of_service Table Source | View Source","title":"mozilla_vpn"},{"location":"mozdata/mozilla_vpn/#add_device_events","text":"Table Source | View Source","title":"add_device_events"},{"location":"mozdata/mozilla_vpn/#waitlist","text":"Table Source | View Source","title":"waitlist"},{"location":"mozdata/mozilla_vpn/#survey_market_fit","text":"Table Source | View Source","title":"survey_market_fit"},{"location":"mozdata/mozilla_vpn/#survey_product_quality","text":"Table Source | View Source","title":"survey_product_quality"},{"location":"mozdata/mozilla_vpn/#survey_intercept_q3","text":"Table Source | View Source","title":"survey_intercept_q3"},{"location":"mozdata/mozilla_vpn/#users","text":"Table Source | View Source","title":"users"},{"location":"mozdata/mozilla_vpn/#survey_recommend","text":"Table Source | View Source","title":"survey_recommend"},{"location":"mozdata/mozilla_vpn/#login_flows","text":"Table Source | View Source","title":"login_flows"},{"location":"mozdata/mozilla_vpn/#protected","text":"Table Source | View Source","title":"protected"},{"location":"mozdata/mozilla_vpn/#survey_cancellation_of_service","text":"Table Source | View Source","title":"survey_cancellation_of_service"},{"location":"mozdata/org_mozilla_fenix/","text":"geckoview_version Table Source | View Source","title":"org_mozilla_fenix"},{"location":"mozdata/org_mozilla_fenix/#geckoview_version","text":"Table Source | View Source","title":"geckoview_version"},{"location":"mozdata/org_mozilla_fenix_nightly/","text":"baseline_clients_daily Table Source | View Source baseline_clients_last_seen Table Source | View Source","title":"org_mozilla_fenix_nightly"},{"location":"mozdata/org_mozilla_fenix_nightly/#baseline_clients_daily","text":"Table Source | View Source","title":"baseline_clients_daily"},{"location":"mozdata/org_mozilla_fenix_nightly/#baseline_clients_last_seen","text":"Table Source | View Source","title":"baseline_clients_last_seen"},{"location":"mozdata/org_mozilla_firefox/","text":"event_types_v1 Recreate a view on the most recent data from event_types_v1 Friendly name: Firefox Android Release Event Types Schedule: daily Owners: frank@mozilla.com Table Source | Metadata Source migrated_clients Table Source | Metadata Source | View Source migration Table Source | Metadata Source | View Source events_daily Table Source | Metadata Source | View Source","title":"org_mozilla_firefox"},{"location":"mozdata/org_mozilla_firefox/#event_types_v1","text":"Recreate a view on the most recent data from event_types_v1 Friendly name: Firefox Android Release Event Types Schedule: daily Owners: frank@mozilla.com Table Source | Metadata Source","title":"event_types_v1"},{"location":"mozdata/org_mozilla_firefox/#migrated_clients","text":"Table Source | Metadata Source | View Source","title":"migrated_clients"},{"location":"mozdata/org_mozilla_firefox/#migration","text":"Table Source | Metadata Source | View Source","title":"migration"},{"location":"mozdata/org_mozilla_firefox/#events_daily","text":"Table Source | Metadata Source | View Source","title":"events_daily"},{"location":"mozdata/org_mozilla_vrbrowser/","text":"clients_last_seen Table Source | View Source","title":"org_mozilla_vrbrowser"},{"location":"mozdata/org_mozilla_vrbrowser/#clients_last_seen","text":"Table Source | View Source","title":"clients_last_seen"},{"location":"mozdata/pocket/","text":"pocket_reach_mau Table Source | View Source","title":"pocket"},{"location":"mozdata/pocket/#pocket_reach_mau","text":"Table Source | View Source","title":"pocket_reach_mau"},{"location":"mozdata/regrets_reporter/","text":"regrets_reporter_update Table Source | View Source","title":"regrets_reporter"},{"location":"mozdata/regrets_reporter/#regrets_reporter_update","text":"Table Source | View Source","title":"regrets_reporter_update"},{"location":"mozdata/search/","text":"mobile_search_aggregates Table Source | View Source mobile_search_clients_last_seen Table Source | View Source desktop_search_aggregates_for_searchreport Table Source | View Source search_rfm Table Source | View Source mobile_search_aggregates_for_searchreport Table Source | View Source search_clients_last_seen Table Source | View Source mobile_search_clients_daily Table Source | View Source desktop_search_aggregates_by_userstate Table Source | View Source search_clients_daily Table Source | View Source search_clients_last_seen_v1 Table Source | View Source search_aggregates Table Source | View Source","title":"search"},{"location":"mozdata/search/#mobile_search_aggregates","text":"Table Source | View Source","title":"mobile_search_aggregates"},{"location":"mozdata/search/#mobile_search_clients_last_seen","text":"Table Source | View Source","title":"mobile_search_clients_last_seen"},{"location":"mozdata/search/#desktop_search_aggregates_for_searchreport","text":"Table Source | View Source","title":"desktop_search_aggregates_for_searchreport"},{"location":"mozdata/search/#search_rfm","text":"Table Source | View Source","title":"search_rfm"},{"location":"mozdata/search/#mobile_search_aggregates_for_searchreport","text":"Table Source | View Source","title":"mobile_search_aggregates_for_searchreport"},{"location":"mozdata/search/#search_clients_last_seen","text":"Table Source | View Source","title":"search_clients_last_seen"},{"location":"mozdata/search/#mobile_search_clients_daily","text":"Table Source | View Source","title":"mobile_search_clients_daily"},{"location":"mozdata/search/#desktop_search_aggregates_by_userstate","text":"Table Source | View Source","title":"desktop_search_aggregates_by_userstate"},{"location":"mozdata/search/#search_clients_daily","text":"Table Source | View Source","title":"search_clients_daily"},{"location":"mozdata/search/#search_clients_last_seen_v1","text":"Table Source | View Source","title":"search_clients_last_seen_v1"},{"location":"mozdata/search/#search_aggregates","text":"Table Source | View Source","title":"search_aggregates"},{"location":"mozdata/static/","text":"normal_distribution Table Source country_names_v1 Table Source third_party_standardized_country_names Table Source normalized_os_name Table Source country_codes_v1 Table Source normalized_os_version Table Source fxa_amplitude_export_users_daily Table Source fxa_amplitude_export_users_last_seen Table Source","title":"static"},{"location":"mozdata/static/#normal_distribution","text":"Table Source","title":"normal_distribution"},{"location":"mozdata/static/#country_names_v1","text":"Table Source","title":"country_names_v1"},{"location":"mozdata/static/#third_party_standardized_country_names","text":"Table Source","title":"third_party_standardized_country_names"},{"location":"mozdata/static/#normalized_os_name","text":"Table Source","title":"normalized_os_name"},{"location":"mozdata/static/#country_codes_v1","text":"Table Source","title":"country_codes_v1"},{"location":"mozdata/static/#normalized_os_version","text":"Table Source","title":"normalized_os_version"},{"location":"mozdata/static/#fxa_amplitude_export_users_daily","text":"Table Source","title":"fxa_amplitude_export_users_daily"},{"location":"mozdata/static/#fxa_amplitude_export_users_last_seen","text":"Table Source","title":"fxa_amplitude_export_users_last_seen"},{"location":"mozdata/stripe/","text":"customers Table Source | View Source plan Table Source | View Source product Table Source | View Source subscription Table Source | View Source","title":"stripe"},{"location":"mozdata/stripe/#customers","text":"Table Source | View Source","title":"customers"},{"location":"mozdata/stripe/#plan","text":"Table Source | View Source","title":"plan"},{"location":"mozdata/stripe/#product","text":"Table Source | View Source","title":"product"},{"location":"mozdata/stripe/#subscription","text":"Table Source | View Source","title":"subscription"},{"location":"mozdata/telemetry/","text":"firefox_nondesktop_exact_mau28_by_dimensions_v1 Table Source | View Source experiment_error_aggregates Table Source | View Source nondesktop_clients_last_seen Table Source | View Source experiment_enrollment_daily_active_population Table Source | View Source clients_probe_processes Table Source | View Source addon_names Table Source | View Source addons_daily Table Source | View Source lockwise_mobile_events Table Source | View Source firefox_nondesktop_exact_mau28_v1 Table Source | View Source crash_aggregates_v1 Table Source | View Source clients_first_seen Identical in schema to clients_daily except that each client appears only once over all time; includes fields first_seen_date and second_seen_date for determining user \"activation\" Friendly name: Clients first seen Schedule: Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source telemetry_ip_privacy_parquet Table Source | View Source | Metadata Source telemetry_downgrade_parquet Table Source | View Source | Metadata Source firefox_nondesktop_exact_mau28 Table Source | View Source | Metadata Source firefox_nondesktop_exact_mau28_by_client_count_dimensions Table Source | View Source | Metadata Source clients_histogram_aggregates_v1 Table Source | View Source | Metadata Source telemetry_ip_privacy Table Source | View Source | Metadata Source core Table Source | View Source | Metadata Source firefox_nondesktop_exact_mau28_by_dimensions Table Source | View Source | Metadata Source crash_summary Table Source | View Source | Metadata Source smoot_usage_day_0 Table Source | View Source | Metadata Source crash_aggregates Table Source | View Source | Metadata Source focus_event Table Source | View Source | Metadata Source experiment_cumulative_search_with_ads_count Table Source | View Source | Metadata Source clients_daily_scalar_aggregates_v1 Table Source | View Source | Metadata Source experiment_search_aggregates_hourly Table Source | View Source | Metadata Source telemetry_shield_study_parquet Table Source | View Source | Metadata Source experiments_v1 Table Source | View Source | Metadata Source addon_aggregates Table Source | View Source | Metadata Source firefox_accounts_exact_mau28_v1 Table Source | View Source | Metadata Source fenix_clients_last_seen Table Source | View Source | Metadata Source experiment_enrollment_other_events_overall Table Source | View Source | Metadata Source attitudes_daily Table Source | View Source | Metadata Source telemetry_heartbeat_parquet Table Source | View Source | Metadata Source main_summary Table Source | View Source | Metadata Source asn_aggregates Table Source | View Source | Metadata Source buildhub2 Table Source | View Source | Metadata Source telemetry_mobile_event_parquet_v2 Table Source | View Source | Metadata Source telemetry_focus_event_parquet_v1 Table Source | View Source | Metadata Source clients_last_seen Table Source | View Source | Metadata Source experiments Table Source | View Source | Metadata Source windows_10_build_distribution Table Source | View Source | Metadata Source crash_summary_v1 Table Source | View Source | Metadata Source core_clients_daily_v1 Table Source | View Source | Metadata Source core_clients_daily Table Source | View Source | Metadata Source health Table Source | View Source | Metadata Source mobile_event Table Source | View Source | Metadata Source core_clients_last_seen_v1 Table Source | View Source | Metadata Source firefox_desktop_exact_mau28_v1 Table Source | View Source | Metadata Source addons Table Source | View Source | Metadata Source main_summary_v3 Table Source | View Source | Metadata Source experiment_enrollment_aggregates_recents Table Source | View Source | Metadata Source main_summary_v4 Table Source | View Source | Metadata Source main_1pct Table Source | View Source | Metadata Source addons_v2 Table Source | View Source | Metadata Source experiments_aggregates_v1 Table Source | View Source | Metadata Source core_clients_last_seen Table Source | View Source | Metadata Source telemetry_focus_event_parquet Table Source | View Source | Metadata Source windows_10_patch_adoption Table Source | View Source | Metadata Source clients_scalar_aggregates_v1 Table Source | View Source | Metadata Source ssl_ratios_v1 Table Source | View Source | Metadata Source telemetry_new_profile_parquet_v2 Table Source | View Source | Metadata Source socorro_crash Table Source | View Source | Metadata Source experiment_search_aggregates_recents Table Source | View Source | Metadata Source clients_daily_histogram_aggregates_v1 Table Source | View Source | Metadata Source devtools_panel_usage Table Source | View Source | Metadata Source firefox_nondesktop_day_2_7_activation Table Source | View Source | Metadata Source desktop_retention_1_week Among profiles that were active at least once in the week starting on the specified day (days 0 through 6), whether each profile is active during the following week (days 7 through 13). This based on https://docs.telemetry.mozilla.org/cookbooks/retention.html#1-week-retention for the usage criterion \"Any Firefox Activity\" on Firefox (Desktop) Friendly name: Desktop 1-Week Retention Schedule: Owners: dthorn@mozilla.com jklukas@mozilla.com Table Source | View Source | Metadata Source fenix_events_v1 Table Source | View Source | Metadata Source telemetry_ip_privacy_parquet_v1 Table Source | View Source | Metadata Source active_profiles Table Source | View Source | Metadata Source telemetry_core_parquet Table Source | View Source | Metadata Source socorro_crash_v2 Table Source | View Source | Metadata Source nondesktop_clients_last_seen_v1 Table Source | View Source | Metadata Source addon_aggregates_v2 Table Source | View Source | Metadata Source clients_daily Table Source | View Source | Metadata Source clients_daily_v6 Table Source | View Source | Metadata Source clients_last_seen_v1 Table Source | View Source | Metadata Source fennec_ios_events_v1 Table Source | View Source | Metadata Source experiment_error_aggregates_v1 Table Source | View Source | Metadata Source firefox_desktop_exact_mau28 Table Source | View Source | Metadata Source eng_workflow_hgpush_parquet_v1 Table Source | View Source | Metadata Source firefox_desktop_exact_mau28_by_client_count_dimensions Table Source | View Source | Metadata Source eng_workflow_build_parquet_v1 Table Source | View Source | Metadata Source telemetry_core_parquet_v3 Table Source | View Source | Metadata Source firefox_desktop_exact_mau28_by_dimensions_v1 Table Source | View Source | Metadata Source experiment_enrollment_overall Table Source | View Source | Metadata Source experiment_enrollment_cumulative_population_estimate Table Source | View Source | Metadata Source client_probe_counts_v1 Table Source | View Source | Metadata Source telemetry_downgrade_parquet_v1 Table Source | View Source | Metadata Source experiment_unenrollment_overall Table Source | View Source | Metadata Source eng_workflow_hgpush_parquet Table Source | View Source | Metadata Source rocket_android_events_v1 Table Source | View Source | Metadata Source windows_10_aggregate Table Source | View Source | Metadata Source telemetry_anonymous_parquet_v1 Table Source | View Source | Metadata Source sync Table Source | View Source | Metadata Source experiment_cumulative_search_count Table Source | View Source | Metadata Source events Table Source | View Source | Metadata Source experiment_cumulative_ad_clicks Table Source | View Source | Metadata Source crash_summary_v2 Table Source | View Source | Metadata Source telemetry_heartbeat_parquet_v1 Table Source | View Source | Metadata Source smoot_usage_day_13 Table Source | View Source | Metadata Source lockwise_mobile_events_v1 Table Source | View Source | Metadata Source telemetry_shield_study_parquet_v1 Table Source | View Source | Metadata Source firefox_nondesktop_exact_mau28_by_product_v1 Table Source | View Source | Metadata Source telemetry_anonymous_parquet Table Source | View Source | Metadata Source events_v1 Table Source | View Source | Metadata Source ssl_ratios Table Source | View Source | Metadata Source accessibility_clients Table Source | View Source | Metadata Source experiment_enrollment_aggregates_hourly Table Source | View Source | Metadata Source firefox_accounts_exact_mau28_by_dimensions Table Source | View Source | Metadata Source firefox_nondesktop_exact_mau28_by_product Table Source | View Source | Metadata Source first_shutdown_summary Table Source | View Source | Metadata Source main_nightly Table Source | View Source | Metadata Source firefox_accounts_exact_mau28_by_dimensions_v1 Table Source | View Source | Metadata Source telemetry_new_profile_parquet Table Source | View Source | Metadata Source firefox_desktop_exact_mau28_by_dimensions Table Source | View Source | Metadata Source origin_content_blocking Table Source | View Source | Metadata Source first_shutdown_summary_v4 Table Source | View Source | Metadata Source telemetry_mobile_event_parquet Table Source | View Source | Metadata Source simpleprophet_forecasts Table Source | View Source | Metadata Source eng_workflow_build_parquet Table Source | View Source | Metadata Source experiments_aggregates Table Source | View Source | Metadata Source","title":"telemetry"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28_by_dimensions_v1","text":"Table Source | View Source","title":"firefox_nondesktop_exact_mau28_by_dimensions_v1"},{"location":"mozdata/telemetry/#experiment_error_aggregates","text":"Table Source | View Source","title":"experiment_error_aggregates"},{"location":"mozdata/telemetry/#nondesktop_clients_last_seen","text":"Table Source | View Source","title":"nondesktop_clients_last_seen"},{"location":"mozdata/telemetry/#experiment_enrollment_daily_active_population","text":"Table Source | View Source","title":"experiment_enrollment_daily_active_population"},{"location":"mozdata/telemetry/#clients_probe_processes","text":"Table Source | View Source","title":"clients_probe_processes"},{"location":"mozdata/telemetry/#addon_names","text":"Table Source | View Source","title":"addon_names"},{"location":"mozdata/telemetry/#addons_daily","text":"Table Source | View Source","title":"addons_daily"},{"location":"mozdata/telemetry/#lockwise_mobile_events","text":"Table Source | View Source","title":"lockwise_mobile_events"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28_v1","text":"Table Source | View Source","title":"firefox_nondesktop_exact_mau28_v1"},{"location":"mozdata/telemetry/#crash_aggregates_v1","text":"Table Source | View Source","title":"crash_aggregates_v1"},{"location":"mozdata/telemetry/#clients_first_seen","text":"Identical in schema to clients_daily except that each client appears only once over all time; includes fields first_seen_date and second_seen_date for determining user \"activation\" Friendly name: Clients first seen Schedule: Owners: jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"clients_first_seen"},{"location":"mozdata/telemetry/#telemetry_ip_privacy_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_ip_privacy_parquet"},{"location":"mozdata/telemetry/#telemetry_downgrade_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_downgrade_parquet"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28","text":"Table Source | View Source | Metadata Source","title":"firefox_nondesktop_exact_mau28"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28_by_client_count_dimensions","text":"Table Source | View Source | Metadata Source","title":"firefox_nondesktop_exact_mau28_by_client_count_dimensions"},{"location":"mozdata/telemetry/#clients_histogram_aggregates_v1","text":"Table Source | View Source | Metadata Source","title":"clients_histogram_aggregates_v1"},{"location":"mozdata/telemetry/#telemetry_ip_privacy","text":"Table Source | View Source | Metadata Source","title":"telemetry_ip_privacy"},{"location":"mozdata/telemetry/#core","text":"Table Source | View Source | Metadata Source","title":"core"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28_by_dimensions","text":"Table Source | View Source | Metadata Source","title":"firefox_nondesktop_exact_mau28_by_dimensions"},{"location":"mozdata/telemetry/#crash_summary","text":"Table Source | View Source | Metadata Source","title":"crash_summary"},{"location":"mozdata/telemetry/#smoot_usage_day_0","text":"Table Source | View Source | Metadata Source","title":"smoot_usage_day_0"},{"location":"mozdata/telemetry/#crash_aggregates","text":"Table Source | View Source | Metadata Source","title":"crash_aggregates"},{"location":"mozdata/telemetry/#focus_event","text":"Table Source | View Source | Metadata Source","title":"focus_event"},{"location":"mozdata/telemetry/#experiment_cumulative_search_with_ads_count","text":"Table Source | View Source | Metadata Source","title":"experiment_cumulative_search_with_ads_count"},{"location":"mozdata/telemetry/#clients_daily_scalar_aggregates_v1","text":"Table Source | View Source | Metadata Source","title":"clients_daily_scalar_aggregates_v1"},{"location":"mozdata/telemetry/#experiment_search_aggregates_hourly","text":"Table Source | View Source | Metadata Source","title":"experiment_search_aggregates_hourly"},{"location":"mozdata/telemetry/#telemetry_shield_study_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_shield_study_parquet"},{"location":"mozdata/telemetry/#experiments_v1","text":"Table Source | View Source | Metadata Source","title":"experiments_v1"},{"location":"mozdata/telemetry/#addon_aggregates","text":"Table Source | View Source | Metadata Source","title":"addon_aggregates"},{"location":"mozdata/telemetry/#firefox_accounts_exact_mau28_v1","text":"Table Source | View Source | Metadata Source","title":"firefox_accounts_exact_mau28_v1"},{"location":"mozdata/telemetry/#fenix_clients_last_seen","text":"Table Source | View Source | Metadata Source","title":"fenix_clients_last_seen"},{"location":"mozdata/telemetry/#experiment_enrollment_other_events_overall","text":"Table Source | View Source | Metadata Source","title":"experiment_enrollment_other_events_overall"},{"location":"mozdata/telemetry/#attitudes_daily","text":"Table Source | View Source | Metadata Source","title":"attitudes_daily"},{"location":"mozdata/telemetry/#telemetry_heartbeat_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_heartbeat_parquet"},{"location":"mozdata/telemetry/#main_summary","text":"Table Source | View Source | Metadata Source","title":"main_summary"},{"location":"mozdata/telemetry/#asn_aggregates","text":"Table Source | View Source | Metadata Source","title":"asn_aggregates"},{"location":"mozdata/telemetry/#buildhub2","text":"Table Source | View Source | Metadata Source","title":"buildhub2"},{"location":"mozdata/telemetry/#telemetry_mobile_event_parquet_v2","text":"Table Source | View Source | Metadata Source","title":"telemetry_mobile_event_parquet_v2"},{"location":"mozdata/telemetry/#telemetry_focus_event_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"telemetry_focus_event_parquet_v1"},{"location":"mozdata/telemetry/#clients_last_seen","text":"Table Source | View Source | Metadata Source","title":"clients_last_seen"},{"location":"mozdata/telemetry/#experiments","text":"Table Source | View Source | Metadata Source","title":"experiments"},{"location":"mozdata/telemetry/#windows_10_build_distribution","text":"Table Source | View Source | Metadata Source","title":"windows_10_build_distribution"},{"location":"mozdata/telemetry/#crash_summary_v1","text":"Table Source | View Source | Metadata Source","title":"crash_summary_v1"},{"location":"mozdata/telemetry/#core_clients_daily_v1","text":"Table Source | View Source | Metadata Source","title":"core_clients_daily_v1"},{"location":"mozdata/telemetry/#core_clients_daily","text":"Table Source | View Source | Metadata Source","title":"core_clients_daily"},{"location":"mozdata/telemetry/#health","text":"Table Source | View Source | Metadata Source","title":"health"},{"location":"mozdata/telemetry/#mobile_event","text":"Table Source | View Source | Metadata Source","title":"mobile_event"},{"location":"mozdata/telemetry/#core_clients_last_seen_v1","text":"Table Source | View Source | Metadata Source","title":"core_clients_last_seen_v1"},{"location":"mozdata/telemetry/#firefox_desktop_exact_mau28_v1","text":"Table Source | View Source | Metadata Source","title":"firefox_desktop_exact_mau28_v1"},{"location":"mozdata/telemetry/#addons","text":"Table Source | View Source | Metadata Source","title":"addons"},{"location":"mozdata/telemetry/#main_summary_v3","text":"Table Source | View Source | Metadata Source","title":"main_summary_v3"},{"location":"mozdata/telemetry/#experiment_enrollment_aggregates_recents","text":"Table Source | View Source | Metadata Source","title":"experiment_enrollment_aggregates_recents"},{"location":"mozdata/telemetry/#main_summary_v4","text":"Table Source | View Source | Metadata Source","title":"main_summary_v4"},{"location":"mozdata/telemetry/#main_1pct","text":"Table Source | View Source | Metadata Source","title":"main_1pct"},{"location":"mozdata/telemetry/#addons_v2","text":"Table Source | View Source | Metadata Source","title":"addons_v2"},{"location":"mozdata/telemetry/#experiments_aggregates_v1","text":"Table Source | View Source | Metadata Source","title":"experiments_aggregates_v1"},{"location":"mozdata/telemetry/#core_clients_last_seen","text":"Table Source | View Source | Metadata Source","title":"core_clients_last_seen"},{"location":"mozdata/telemetry/#telemetry_focus_event_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_focus_event_parquet"},{"location":"mozdata/telemetry/#windows_10_patch_adoption","text":"Table Source | View Source | Metadata Source","title":"windows_10_patch_adoption"},{"location":"mozdata/telemetry/#clients_scalar_aggregates_v1","text":"Table Source | View Source | Metadata Source","title":"clients_scalar_aggregates_v1"},{"location":"mozdata/telemetry/#ssl_ratios_v1","text":"Table Source | View Source | Metadata Source","title":"ssl_ratios_v1"},{"location":"mozdata/telemetry/#telemetry_new_profile_parquet_v2","text":"Table Source | View Source | Metadata Source","title":"telemetry_new_profile_parquet_v2"},{"location":"mozdata/telemetry/#socorro_crash","text":"Table Source | View Source | Metadata Source","title":"socorro_crash"},{"location":"mozdata/telemetry/#experiment_search_aggregates_recents","text":"Table Source | View Source | Metadata Source","title":"experiment_search_aggregates_recents"},{"location":"mozdata/telemetry/#clients_daily_histogram_aggregates_v1","text":"Table Source | View Source | Metadata Source","title":"clients_daily_histogram_aggregates_v1"},{"location":"mozdata/telemetry/#devtools_panel_usage","text":"Table Source | View Source | Metadata Source","title":"devtools_panel_usage"},{"location":"mozdata/telemetry/#firefox_nondesktop_day_2_7_activation","text":"Table Source | View Source | Metadata Source","title":"firefox_nondesktop_day_2_7_activation"},{"location":"mozdata/telemetry/#desktop_retention_1_week","text":"Among profiles that were active at least once in the week starting on the specified day (days 0 through 6), whether each profile is active during the following week (days 7 through 13). This based on https://docs.telemetry.mozilla.org/cookbooks/retention.html#1-week-retention for the usage criterion \"Any Firefox Activity\" on Firefox (Desktop) Friendly name: Desktop 1-Week Retention Schedule: Owners: dthorn@mozilla.com jklukas@mozilla.com Table Source | View Source | Metadata Source","title":"desktop_retention_1_week"},{"location":"mozdata/telemetry/#fenix_events_v1","text":"Table Source | View Source | Metadata Source","title":"fenix_events_v1"},{"location":"mozdata/telemetry/#telemetry_ip_privacy_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"telemetry_ip_privacy_parquet_v1"},{"location":"mozdata/telemetry/#active_profiles","text":"Table Source | View Source | Metadata Source","title":"active_profiles"},{"location":"mozdata/telemetry/#telemetry_core_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_core_parquet"},{"location":"mozdata/telemetry/#socorro_crash_v2","text":"Table Source | View Source | Metadata Source","title":"socorro_crash_v2"},{"location":"mozdata/telemetry/#nondesktop_clients_last_seen_v1","text":"Table Source | View Source | Metadata Source","title":"nondesktop_clients_last_seen_v1"},{"location":"mozdata/telemetry/#addon_aggregates_v2","text":"Table Source | View Source | Metadata Source","title":"addon_aggregates_v2"},{"location":"mozdata/telemetry/#clients_daily","text":"Table Source | View Source | Metadata Source","title":"clients_daily"},{"location":"mozdata/telemetry/#clients_daily_v6","text":"Table Source | View Source | Metadata Source","title":"clients_daily_v6"},{"location":"mozdata/telemetry/#clients_last_seen_v1","text":"Table Source | View Source | Metadata Source","title":"clients_last_seen_v1"},{"location":"mozdata/telemetry/#fennec_ios_events_v1","text":"Table Source | View Source | Metadata Source","title":"fennec_ios_events_v1"},{"location":"mozdata/telemetry/#experiment_error_aggregates_v1","text":"Table Source | View Source | Metadata Source","title":"experiment_error_aggregates_v1"},{"location":"mozdata/telemetry/#firefox_desktop_exact_mau28","text":"Table Source | View Source | Metadata Source","title":"firefox_desktop_exact_mau28"},{"location":"mozdata/telemetry/#eng_workflow_hgpush_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"eng_workflow_hgpush_parquet_v1"},{"location":"mozdata/telemetry/#firefox_desktop_exact_mau28_by_client_count_dimensions","text":"Table Source | View Source | Metadata Source","title":"firefox_desktop_exact_mau28_by_client_count_dimensions"},{"location":"mozdata/telemetry/#eng_workflow_build_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"eng_workflow_build_parquet_v1"},{"location":"mozdata/telemetry/#telemetry_core_parquet_v3","text":"Table Source | View Source | Metadata Source","title":"telemetry_core_parquet_v3"},{"location":"mozdata/telemetry/#firefox_desktop_exact_mau28_by_dimensions_v1","text":"Table Source | View Source | Metadata Source","title":"firefox_desktop_exact_mau28_by_dimensions_v1"},{"location":"mozdata/telemetry/#experiment_enrollment_overall","text":"Table Source | View Source | Metadata Source","title":"experiment_enrollment_overall"},{"location":"mozdata/telemetry/#experiment_enrollment_cumulative_population_estimate","text":"Table Source | View Source | Metadata Source","title":"experiment_enrollment_cumulative_population_estimate"},{"location":"mozdata/telemetry/#client_probe_counts_v1","text":"Table Source | View Source | Metadata Source","title":"client_probe_counts_v1"},{"location":"mozdata/telemetry/#telemetry_downgrade_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"telemetry_downgrade_parquet_v1"},{"location":"mozdata/telemetry/#experiment_unenrollment_overall","text":"Table Source | View Source | Metadata Source","title":"experiment_unenrollment_overall"},{"location":"mozdata/telemetry/#eng_workflow_hgpush_parquet","text":"Table Source | View Source | Metadata Source","title":"eng_workflow_hgpush_parquet"},{"location":"mozdata/telemetry/#rocket_android_events_v1","text":"Table Source | View Source | Metadata Source","title":"rocket_android_events_v1"},{"location":"mozdata/telemetry/#windows_10_aggregate","text":"Table Source | View Source | Metadata Source","title":"windows_10_aggregate"},{"location":"mozdata/telemetry/#telemetry_anonymous_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"telemetry_anonymous_parquet_v1"},{"location":"mozdata/telemetry/#sync","text":"Table Source | View Source | Metadata Source","title":"sync"},{"location":"mozdata/telemetry/#experiment_cumulative_search_count","text":"Table Source | View Source | Metadata Source","title":"experiment_cumulative_search_count"},{"location":"mozdata/telemetry/#events","text":"Table Source | View Source | Metadata Source","title":"events"},{"location":"mozdata/telemetry/#experiment_cumulative_ad_clicks","text":"Table Source | View Source | Metadata Source","title":"experiment_cumulative_ad_clicks"},{"location":"mozdata/telemetry/#crash_summary_v2","text":"Table Source | View Source | Metadata Source","title":"crash_summary_v2"},{"location":"mozdata/telemetry/#telemetry_heartbeat_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"telemetry_heartbeat_parquet_v1"},{"location":"mozdata/telemetry/#smoot_usage_day_13","text":"Table Source | View Source | Metadata Source","title":"smoot_usage_day_13"},{"location":"mozdata/telemetry/#lockwise_mobile_events_v1","text":"Table Source | View Source | Metadata Source","title":"lockwise_mobile_events_v1"},{"location":"mozdata/telemetry/#telemetry_shield_study_parquet_v1","text":"Table Source | View Source | Metadata Source","title":"telemetry_shield_study_parquet_v1"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28_by_product_v1","text":"Table Source | View Source | Metadata Source","title":"firefox_nondesktop_exact_mau28_by_product_v1"},{"location":"mozdata/telemetry/#telemetry_anonymous_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_anonymous_parquet"},{"location":"mozdata/telemetry/#events_v1","text":"Table Source | View Source | Metadata Source","title":"events_v1"},{"location":"mozdata/telemetry/#ssl_ratios","text":"Table Source | View Source | Metadata Source","title":"ssl_ratios"},{"location":"mozdata/telemetry/#accessibility_clients","text":"Table Source | View Source | Metadata Source","title":"accessibility_clients"},{"location":"mozdata/telemetry/#experiment_enrollment_aggregates_hourly","text":"Table Source | View Source | Metadata Source","title":"experiment_enrollment_aggregates_hourly"},{"location":"mozdata/telemetry/#firefox_accounts_exact_mau28_by_dimensions","text":"Table Source | View Source | Metadata Source","title":"firefox_accounts_exact_mau28_by_dimensions"},{"location":"mozdata/telemetry/#firefox_nondesktop_exact_mau28_by_product","text":"Table Source | View Source | Metadata Source","title":"firefox_nondesktop_exact_mau28_by_product"},{"location":"mozdata/telemetry/#first_shutdown_summary","text":"Table Source | View Source | Metadata Source","title":"first_shutdown_summary"},{"location":"mozdata/telemetry/#main_nightly","text":"Table Source | View Source | Metadata Source","title":"main_nightly"},{"location":"mozdata/telemetry/#firefox_accounts_exact_mau28_by_dimensions_v1","text":"Table Source | View Source | Metadata Source","title":"firefox_accounts_exact_mau28_by_dimensions_v1"},{"location":"mozdata/telemetry/#telemetry_new_profile_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_new_profile_parquet"},{"location":"mozdata/telemetry/#firefox_desktop_exact_mau28_by_dimensions","text":"Table Source | View Source | Metadata Source","title":"firefox_desktop_exact_mau28_by_dimensions"},{"location":"mozdata/telemetry/#origin_content_blocking","text":"Table Source | View Source | Metadata Source","title":"origin_content_blocking"},{"location":"mozdata/telemetry/#first_shutdown_summary_v4","text":"Table Source | View Source | Metadata Source","title":"first_shutdown_summary_v4"},{"location":"mozdata/telemetry/#telemetry_mobile_event_parquet","text":"Table Source | View Source | Metadata Source","title":"telemetry_mobile_event_parquet"},{"location":"mozdata/telemetry/#simpleprophet_forecasts","text":"Table Source | View Source | Metadata Source","title":"simpleprophet_forecasts"},{"location":"mozdata/telemetry/#eng_workflow_build_parquet","text":"Table Source | View Source | Metadata Source","title":"eng_workflow_build_parquet"},{"location":"mozdata/telemetry/#experiments_aggregates","text":"Table Source | View Source | Metadata Source","title":"experiments_aggregates"},{"location":"mozdata/udf/","text":"days_since_created_profile_as_28_bits Takes in a difference between submission date and profile creation date and returns a bit pattern representing the profile creation date IFF the profile date is the same as the submission date or no more than 6 days earlier. Analysis has shown that client-reported profile creation dates are much less reliable outside of this range and cannot be used as reliable indicators of new profile creation. Friendly name: Days Since Created Profile As 28 Bits Table Source | Metadata Source active_values_from_days_seen_map Given a map of representing activity for STRING key s, this function returns an array of which key s were active for the time period in question. start_offset should be at most 0. n_bits should be at most the remaining bits. Friendly name: Active Values From Days Seen Map Table Source | Metadata Source parquet_array_sum Sum an array from a parquet-derived field. These are lists of an element that contain the field value. Friendly name: Parquet Array Sum Table Source | Metadata Source coalesce_adjacent_days_28_bits We generally want to believe only the first reasonable profile creation date that we receive from a client. Given bits representing usage from the previous day and the current day, this function shifts the first argument by one day and returns either that value if non-zero and non-null, the current day value if non-zero and non-null, or else 0. Friendly name: Coalesce Adjacent Days 28 Bits Table Source | Metadata Source json_mode_last Friendly name: Json Mode Last Table Source | Metadata Source bits_to_days_since_seen Given a BYTES, return the number of days since the client was last seen. If no bits are set, returns NULL, indicating we don't know. Otherwise the results are 0-indexed, meaning \\x01 will return 0. Tests showed this being 5-10x faster than the simpler alternative: CREATE OR REPLACE FUNCTION udf.bits_to_days_since_seen(b BYTES) AS (( SELECT MIN(n) FROM UNNEST(GENERATE_ARRAY(0, 364)) AS n WHERE BIT_COUNT(SUBSTR(b >> n, -1) & b'\\x01') > 0)); See also: bits_to_days_since_first_seen.sql Friendly name: Bits To Days Since Seen Table Source | Metadata Source bits28_days_since_seen Friendly name: Bits28 Days Since Seen Table Source | Metadata Source histogram_to_mean Friendly name: Histogram To Mean Table Source | Metadata Source glean_timespan_nanos Friendly name: Glean Timespan Nanos Table Source | Metadata Source null_if_empty_list Return NULL if list is empty, otherwise return list. This cannot be done with NULLIF because NULLIF does not support arrays. Friendly name: Null If Empty List Table Source | Metadata Source country_code_to_flag For a given two-letter ISO 3166-1 alpha-2 country code, returns a string consisting of two Unicode regional indicator symbols, which is rendered in supporting fonts (such as in the BigQuery console or STMO) as flag emoji. This is just for fun. See: - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 - https://en.wikipedia.org/wiki/Regional_Indicator_Symbol Friendly name: Country Code To Flag Table Source | Metadata Source add_searches_by_index Return sums of each search type grouped by the index. Results are ordered by index. Friendly name: Add Searches By Index Table Source | Metadata Source array_of_12_zeroes An array of 12 zeroes Friendly name: Array Of 12 Zeroes Table Source | Metadata Source new_monthly_engine_searches_struct This struct represents the past year's worth of searches. Each month has its own entry, hence 12. Friendly name: New Monthly Engine Searches Struct Table Source | Metadata Source normalize_metadata Friendly name: Normalize Metadata Table Source | Metadata Source pos_of_leading_set_bit Returns the 0-based index of the first set bit. No set bits returns NULL. Friendly name: Pos Of Leading Set Bit Table Source | Metadata Source shift_28_bits_one_day Shift input bits one day left and drop any bits beyond 28 days. Friendly name: Shift 28 Bits One Day Table Source | Metadata Source bits28_to_string Friendly name: Bits28 To String Table Source | Metadata Source kv_array_append_to_json_string Returns a JSON string which has the pair appended to the provided input JSON string. NULL is also valid for input . Examples: udf.kv_array_append_to_json_string('{\"foo\":\"bar\"}', [STRUCT(\"baz\" AS key, \"boo\" AS value)]) '{\"foo\":\"bar\",\"baz\":\"boo\"}' udf.kv_array_append_to_json_string('{}', [STRUCT(\"baz\" AS key, \"boo\" AS value)]) '{\"baz\": \"boo\"}' Friendly name: Kv Array Append To Json String Table Source | Metadata Source combine_experiment_days The \"clients_last_seen\" class of tables represent various types of client activity within a 28-day window as bit patterns. This function takes in two arrays of structs where each entry gives the bit pattern for days in which we saw a ping for a given user in a given experiment. We combine the bit patterns for the previous day and the current day, returning a single array of experiment structs. Friendly name: Combine Experiment Days Table Source | Metadata Source normalize_glean_ping_info Friendly name: Normalize Glean Ping Info Table Source | Metadata Source shift_one_day Returns the bitfield shifted by one day, 0 for NULL Friendly name: Shift One Day Table Source | Metadata Source bits_to_days_seen Given a BYTE, get the number of days the user was seen. NULL input returns NULL output. Friendly name: Bits To Days Seen Table Source | Metadata Source bitcount_lowest_7 This function counts the 1s in lowest 7 bits of an INT64 Friendly name: Bitcount Lowest 7 Table Source | Metadata Source bits28_range Friendly name: Bits28 Range Table Source | Metadata Source histogram_to_threshold_count Friendly name: Histogram To Threshold Count Table Source | Metadata Source get_key_with_null Friendly name: Get Key With Null Table Source | Metadata Source normalize_os Friendly name: Normalize Os Table Source | Metadata Source active_n_weeks_ago Friendly name: Active N Weeks Ago Table Source | Metadata Source main_summary_scalars Friendly name: Main Summary Scalars Table Source | Metadata Source histogram_max_key_with_nonzero_value Find the largest numeric bucket that contains a value greater than zero. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L253-L266 Friendly name: Histogram Max Key With Nonzero Value Table Source | Metadata Source aggregate_map_first Returns an aggregated map with all the keys and the first corresponding value from the given maps Friendly name: Aggregate Map First Table Source | Metadata Source bits28_to_dates Friendly name: Bits28 To Dates Table Source | Metadata Source vector_add This function adds two vectors. The two vectors can have different length. If one vector is null, the other vector will be returned directly. Friendly name: Vector Add Table Source | Metadata Source keyed_histogram_get_sum Take a keyed histogram of type STRUCT<key STRING, value STRING>, extract the histogram of the given key, and return the sum value Friendly name: Keyed Histogram Get Sum Table Source | Metadata Source round_timestamp_to_minute Floor a timestamp object to the given minute interval. Friendly name: Round Timestamp To Minute Table Source | Metadata Source add_monthly_searches Adds together two engine searches structs. Each engine searches struct has a MAP[engine -> search_counts_struct]. We want to add add together the prev and curr's values for a certain engine. This allows us to be flexible with the number of engines we're using. Friendly name: Add Monthly Searches Table Source | Metadata Source map_sum Friendly name: Map Sum Table Source | Metadata Source int_to_365_bits Friendly name: Int To 365 Bits Table Source | Metadata Source decode_int64 Friendly name: Decode Int64 Table Source | Metadata Source smoot_usage_from_28_bits Calculates a variety of metrics based on bit patterns of daily usage for the smoot_usage_* tables. Friendly name: Smoot Usage From 28 Bits Table Source | Metadata Source extract_count_histogram_value Friendly name: Extract Count Histogram Value Table Source | Metadata Source array_slice Friendly name: Array Slice Table Source | Metadata Source dedupe_array Return an array containing only distinct values of the given array Friendly name: Dedupe Array Table Source | Metadata Source histogram_merge Friendly name: Histogram Merge Table Source | Metadata Source mode_last_retain_nulls Friendly name: Mode Last Retain Nulls Table Source | Metadata Source bits_to_active_n_weeks_ago Given a BYTE and an INT64, return whether the user was active that many weeks ago. NULL input returns NULL output. Friendly name: Bits To Active N Weeks Ago Table Source | Metadata Source event_code_points_to_string Table Source | Metadata Source days_seen_bytes_to_rfm Return the frequency, recency, and T from a BYTE array, as defined in https://lifetimes.readthedocs.io/en/latest/Quickstart.html#the-shape-of-your-data RFM refers to Recency, Frequency, and Monetary value. Friendly name: Days Seen Bytes To Rfm Table Source | Metadata Source bits28_active_in_range Friendly name: Bits28 Active In Range Table Source | Metadata Source mode_last Friendly name: Mode Last Table Source | Metadata Source geo_struct Convert geoip lookup fields to a struct, replacing '??' with NULL. Returns NULL if if required field country would be NULL. Replaces '??' with NULL because '??' is a placeholder that may be used if there was an issue during geoip lookup in hindsight. Friendly name: Geo Struct Table Source | Metadata Source aggregate_search_map Aggregates the total counts of the given search counters Friendly name: Aggregate Search Map Table Source | Metadata Source quantile_search_metric_contribution This function returns how much of one metric is contributed by the quantile of another metric. Quantile variable should add an offset to get the requried percentile value. Example: udf.quantile_search_metric_contribution(sap, search_with_ads, sap_percentiles[OFFSET(9)]) It returns search_with_ads if sap value in top 10% volumn else null. Friendly name: Quantile Search Metric Contribution Table Source | Metadata Source array_11_zeroes_then An array of 11 zeroes, followed by a supplied value Friendly name: Array 11 Zeroes Then Table Source | Metadata Source aggregate_active_addons This function selects most frequently occuring value for each addon_id, using the latest value in the input among ties. The type for active_addons is ARRAY<STRUCT<addon_id STRING, ...>>, i.e. the output of SELECT ARRAY_CONCAT_AGG(active_addons) FROM telemetry.main_summary_v4 , and is left unspecified to allow changes to the fields of the STRUCT. Friendly name: Aggregate Active Addons Table Source | Metadata Source extract_document_type Extract the document type from a table name e.g. _TABLE_SUFFIX. Friendly name: Extract Document Type Table Source | Metadata Source pos_of_trailing_set_bit Identical to bits28_days_since_seen. Returns a 0-based index of the rightmost set bit in the passed bit pattern or null if no bits are set (bits = 0). To determine this position, we take a bitwise AND of the bit pattern and its complement, then we determine the position of the bit via base-2 logarithm; see https://stackoverflow.com/a/42747608/1260237 Friendly name: Pos Of Trailing Set Bit Table Source | Metadata Source bool_to_365_bits Convert a boolean to 365 bit byte array Friendly name: Bool To 365 Bits Table Source | Metadata Source bits28_retention Friendly name: Bits28 Retention Table Source | Metadata Source combine_days_seen_maps The \"clients_last_seen\" class of tables represent various types of client activity within a 28-day window as bit patterns. This function takes in two arrays of structs (aka maps) where each entry gives the bit pattern for days in which we saw a ping for a given user in a given key. We combine the bit patterns for the previous day and the current day, returning a single map. See udf.combine_experiment_days for a more specific example of this approach. Friendly name: Combine Days Seen Maps Table Source | Metadata Source boolean_histogram_to_boolean Given histogram h, return TRUE if it has a value in the \"true\" bucket, or FALSE if it has a value in the \"false\" bucket, or NULL otherwise. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L309-L317 Friendly name: Boolean Histogram To Boolean Table Source | Metadata Source zeroed_array Generates an array if all zeroes, of arbitrary length Friendly name: Zeroed Array Table Source | Metadata Source extract_schema_validation_path Return a path derived from an error message in payload_bytes_error Friendly name: Extract Schema Validation Path Table Source | Metadata Source bitmask_lowest_7 Friendly name: Bitmask Lowest 7 Table Source | Metadata Source pack_event_properties Table Source | Metadata Source bits_to_days_since_first_seen Given a BYTES, return the number of days since the client was first seen. If no bits are set, returns NULL, indicating we don't know. Otherwise the result is 0-indexed, meaning that for \\x01, it will return 0. Results showed this being between 5-10x faster than the simpler alternative: CREATE OR REPLACE FUNCTION udf.bits_to_days_since_first_seen(b BYTES) AS (( SELECT MAX(n) FROM UNNEST(GENERATE_ARRAY( 0, 8 * BYTE_LENGTH(b))) AS n WHERE BIT_COUNT(SUBSTR(b >> n, -1) & b'\\x01') > 0)); See also: bits_to_days_since_seen.sql Friendly name: Bits To Days Since First Seen Table Source | Metadata Source coalesce_adjacent_days_365_bits Coalesce previous data's PCD with the new data's PCD. We generally want to believe only the first reasonable profile creation date that we receive from a client. Given bytes representing usage from the previous day and the current day, this function shifts the first argument by one day and returns either that value if non-zero and non-null, the current day value if non-zero and non-null, or else 0. Friendly name: Coalesce Adjacent Days 365 Bits Table Source | Metadata Source combine_adjacent_days_28_bits Combines two bit patterns. The first pattern represents activity over a 28-day period ending \"yesterday\". The second pattern represents activity as observed today (usually just 0 or 1). We shift the bits in the first pattern by one to set the new baseline as \"today\", then perform a bitwise OR of the two patterns. Friendly name: Combine Adjacent Days 28 Bits Table Source | Metadata Source extract_document_version Extract the document version from a table name e.g. _TABLE_SUFFIX. Friendly name: Extract Document Version Table Source | Metadata Source normalize_fenix_metrics Accepts a glean metrics struct as input and returns a modified struct that nulls out histograms for older versions of the Glean SDK that reported pathological binning; see https://bugzilla.mozilla.org/show_bug.cgi?id=1592930 Friendly name: Normalize Fenix Metrics Table Source | Metadata Source bitmask_365 A bitmask for 365 bits Friendly name: Bitmask 365 Table Source | Metadata Source array_drop_first_and_append Drop the first element of an array, and append the given element. Result is an array with the same length as the input. Friendly name: Array Drop First And Append Table Source | Metadata Source gzip_length_footer Given a gzip compressed byte string, extract the uncompressed size from the footer. WARNING: THIS FUNCTION IS NOT RELIABLE FOR ARBITRARY GZIP STREAMS. It should, however, be safe to use for checking the decompressed size of payload in payload_bytes_decoded (and NOT payload_bytes_raw) because that payload is produced by the decoder and limited to conditions where the footer is accurate. From https://stackoverflow.com/a/9213826 First, the only information about the uncompressed length is four bytes at the end of the gzip file (stored in little-endian order). By necessity, that is the length modulo 232. So if the uncompressed length is 4 GB or more, you won't know what the length is. You can only be certain that the uncompressed length is less than 4 GB if the compressed length is less than something like 232 / 1032 + 18, or around 4 MB. (1032 is the maximum compression factor of deflate.) Second, and this is worse, a gzip file may actually be a concatenation of multiple gzip streams. Other than decoding, there is no way to find where each gzip stream ends in order to look at the four-byte uncompressed length of that piece. (Which may be wrong anyway due to the first reason.) Third, gzip files will sometimes have junk after the end of the gzip stream (usually zeros). Then the last four bytes are not the length. Friendly name: Gzip Length Footer Table Source | Metadata Source json_extract_histogram Friendly name: Json Extract Histogram Table Source | Metadata Source zero_as_365_bits Zero represented as a 365-bit byte array Friendly name: Zero As 365 Bits Table Source | Metadata Source parse_iso8601_date Take a ISO 8601 date or date and time string and return a DATE. Return null if parse fails. Possible formats: 2019-11-04, 2019-11-04T21:15:00+00:00, 2019-11-04T21:15:00Z, 20191104T211500Z Friendly name: Parse Iso8601 Date Table Source | Metadata Source map_bing_revenue_country_to_country_code For use by LTV revenue join only. Maps the Bing country to a country code. Only keeps the country codes we want to aggregate on. Friendly name: Map Bing Revenue Country To Country Code Table Source | Metadata Source int_to_hex_string Friendly name: Int To Hex String Table Source | Metadata Source safe_sample_id Stably hash a client_id to an integer between 0 and 99, or NULL if client_id isn't 36 bytes Friendly name: Safe Sample Id Table Source | Metadata Source get_key Friendly name: Get Key Table Source | Metadata Source hmac_sha256 Given a key and message, return the HMAC-SHA256 hash. This algorithm can be found in Wikipedia: https://en.wikipedia.org/wiki/HMAC#Implementation This implentation is validated against the NIST test vectors. See test/validation/hmac_sha256.py for more information. Friendly name: Hmac Sha256 Table Source | Metadata Source bits28_from_string Friendly name: Bits28 From String Table Source | Metadata Source merge_scalar_user_data Given an array of scalar metric data that might have duplicate values for a metric, merge them into one value. Friendly name: Merge Scalar User Data Table Source | Metadata Source bitmask_range Returns a bitmask that can be used to return a subset of an integer representing a bit array. The start_ordinal argument is an integer specifying the starting position of the slice, with start_ordinal = 1 indicating the first bit. The length argument is the number of bits to include in the mask. The arguments were chosen to match the semantics of the SUBSTR function; see https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#substr Friendly name: Bitmask Range Table Source | Metadata Source map_mode_last Friendly name: Map Mode Last Table Source | Metadata Source ga_is_mozilla_browser Determine if a browser in a Google Analytics data is produced by Mozilla Friendly name: Is Mozilla Browser Table Source | Metadata Source fenix_build_to_datetime Convert the Fenix client_info.app_build-format string to a DATETIME. May return NULL on failure. Fenix originally used an 8-digit app_build format In short it is yDDDHHmm : y is years since 2018 DDD is day of year, 0-padded, 001-366 HH is hour of day, 00-23 mm is minute of hour, 00-59 The last date seen with an 8-digit build ID is 2020-08-10. Newer builds use a 10-digit format where the integer represents a pattern consisting of 32 bits. The 17 bits starting 13 bits from the left represent a number of hours since UTC midnight beginning 2014-12-28. This function tolerates both formats. After using this you may wish to DATETIME_TRUNC(result, DAY) for grouping by build date. Friendly name: Fenix Build To Datetime Table Source | Metadata Source bitmask_lowest_28 Friendly name: Bitmask Lowest 28 Table Source | Metadata Source bits_from_offsets Returns a bit pattern of type BYTES compactly encoding the given array of positive integer offsets. This is primarily useful to generate a compact encoding of dates on which a feature was used, with arbitrarily long history. Example aggregation: sql bits_from_offsets( ARRAY_AGG(IF(foo, DATE_DIFF(anchor_date, submission_date, DAY), NULL) IGNORE NULLS) ) The resulting value can be cast to an INT64 representing the most recent 64 days via: sql CAST(CONCAT(&#39;0x&#39;, TO_HEX(RIGHT(bits &gt;&gt; i, 4))) AS INT64) Or representing the most recent 28 days (compatible with bits28 functions) via: sql CAST(CONCAT(&#39;0x&#39;, TO_HEX(RIGHT(bits &gt;&gt; i, 4))) AS INT64) &lt;&lt; 36 &gt;&gt; 36 Friendly name: Bits From Offsets Table Source | Metadata Source normalize_glean_baseline_client_info Friendly name: Normalize Glean Baseline Client Info Table Source | Metadata Source normalize_monthly_searches Sum up the monthy search count arrays by normalized engine Friendly name: Normalize Monthly Searches Table Source | Metadata Source parse_desktop_telemetry_uri Parses and labels the components of a telemetry desktop ping submission uri Per https://docs.telemetry.mozilla.org/concepts/pipeline/http_edge_spec.html#special-handling-for-firefox-desktop-telemetry the format is /submit/telemetry/docId/docType/appName/appVersion/appUpdateChannel/appBuildID e.g. /submit/telemetry/ce39b608-f595-4c69-b6a6-f7a436604648/main/Firefox/61.0a1/nightly/20180328030202 Friendly name: Parse Desktop Telemetry Uri Table Source | Metadata Source normalize_main_payload Accepts a pipeline metadata struct as input and returns a modified struct that includes a few parsed or normalized variants of the input metadata fields. Friendly name: Normalize Main Payload Table Source | Metadata Source map_revenue_country Only for use by the LTV Revenue join. Maps country codes to the codes we have in the revenue dataset. Buckets small Bing countries into \"other\". Friendly name: Map Revenue Country Table Source | Metadata Source glean_timespan_seconds Friendly name: Glean Timespan Seconds Table Source | Metadata Source aggregate_search_counts Friendly name: Aggregate Search Counts Table Source | Metadata Source kv_array_to_json_string Returns a JSON string representing the input key-value array. Value type must be able to be represented as a string - this function will cast to a string. At Mozilla, the schema for a map is STRUCT<key_value ARRAY<STRUCT<key ANY TYPE, value ANY TYPE>>>. To use this with that representation, it should be as udf.kv_array_to_json_string(struct.key_value) . Friendly name: Kv Array To Json String Table Source | Metadata Source combine_adjacent_days_365_bits Friendly name: Combine Adjacent Days 365 Bits Table Source | Metadata Source one_as_365_bits One represented as a byte array of 365 bits Friendly name: One As 365 Bits Table Source | Metadata Source deanonymize_event Rename struct fields in anonymous event tuples to meaningful names. Friendly name: Deanonymize Event Table Source | Metadata Source mod_uint128 This function returns \"dividend mod divisor\" where the dividend and the result is encoded in bytes, and divisor is an integer. Friendly name: Mod Uint128 Table Source | Metadata Source add_monthly_engine_searches This function specifically windows searches into calendar-month windows. This means groups are not necessarily directly comparable, since different months have different numbers of days. On the first of each month, a new month is appended, and the first month is dropped. If the date is not the first of the month, the new entry is added to the last element in the array. For example, if we were adding 12 to [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]: On the first of the month, the result would be [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12] On any other day of the month, the result would be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 24] This happens for every aggregate (searches, ad clicks, etc.) Friendly name: Add Monthly Engine Searches Table Source | Metadata Source shift_365_bits_one_day Shift input bits one day left and drop any bits beyond 365 days. Friendly name: Shift 365 Bits One Day Table Source | Metadata Source json_extract_int_map Friendly name: Json Extract Int Map Table Source | Metadata Source histogram_percentiles Friendly name: Histogram Percentiles Table Source | Metadata Source normalize_search_engine Return normalized engine name for recognized engines Friendly name: Normalize Search Engine Table Source | Metadata Source safe_crc32_uuid Calculate the CRC-32 hash of a 36-byte UUID, or NULL if the value isn't 36 bytes. This implementation is limited to an exact length because recursion does not work. Based on https://stackoverflow.com/a/18639999/1260237 See https://en.wikipedia.org/wiki/Cyclic_redundancy_check Friendly name: Safe CRC-32 Uuid Table Source | Metadata Source extract_histogram_sum This is a performance optimization compared to the more general mozfun.hist.extract for cases where only the histogram sum is needed. It must support all the same format variants as mozfun.hist.extract but this simplification is necessary to keep the main_summary query complexity in check. Friendly name: Extract Histogram Sum Table Source | Metadata Source histogram_normalize Friendly name: Histogram Normalize Table Source | Metadata Source","title":"udf"},{"location":"mozdata/udf/#days_since_created_profile_as_28_bits","text":"Takes in a difference between submission date and profile creation date and returns a bit pattern representing the profile creation date IFF the profile date is the same as the submission date or no more than 6 days earlier. Analysis has shown that client-reported profile creation dates are much less reliable outside of this range and cannot be used as reliable indicators of new profile creation. Friendly name: Days Since Created Profile As 28 Bits Table Source | Metadata Source","title":"days_since_created_profile_as_28_bits"},{"location":"mozdata/udf/#active_values_from_days_seen_map","text":"Given a map of representing activity for STRING key s, this function returns an array of which key s were active for the time period in question. start_offset should be at most 0. n_bits should be at most the remaining bits. Friendly name: Active Values From Days Seen Map Table Source | Metadata Source","title":"active_values_from_days_seen_map"},{"location":"mozdata/udf/#parquet_array_sum","text":"Sum an array from a parquet-derived field. These are lists of an element that contain the field value. Friendly name: Parquet Array Sum Table Source | Metadata Source","title":"parquet_array_sum"},{"location":"mozdata/udf/#coalesce_adjacent_days_28_bits","text":"We generally want to believe only the first reasonable profile creation date that we receive from a client. Given bits representing usage from the previous day and the current day, this function shifts the first argument by one day and returns either that value if non-zero and non-null, the current day value if non-zero and non-null, or else 0. Friendly name: Coalesce Adjacent Days 28 Bits Table Source | Metadata Source","title":"coalesce_adjacent_days_28_bits"},{"location":"mozdata/udf/#json_mode_last","text":"Friendly name: Json Mode Last Table Source | Metadata Source","title":"json_mode_last"},{"location":"mozdata/udf/#bits_to_days_since_seen","text":"Given a BYTES, return the number of days since the client was last seen. If no bits are set, returns NULL, indicating we don't know. Otherwise the results are 0-indexed, meaning \\x01 will return 0. Tests showed this being 5-10x faster than the simpler alternative: CREATE OR REPLACE FUNCTION udf.bits_to_days_since_seen(b BYTES) AS (( SELECT MIN(n) FROM UNNEST(GENERATE_ARRAY(0, 364)) AS n WHERE BIT_COUNT(SUBSTR(b >> n, -1) & b'\\x01') > 0)); See also: bits_to_days_since_first_seen.sql Friendly name: Bits To Days Since Seen Table Source | Metadata Source","title":"bits_to_days_since_seen"},{"location":"mozdata/udf/#bits28_days_since_seen","text":"Friendly name: Bits28 Days Since Seen Table Source | Metadata Source","title":"bits28_days_since_seen"},{"location":"mozdata/udf/#histogram_to_mean","text":"Friendly name: Histogram To Mean Table Source | Metadata Source","title":"histogram_to_mean"},{"location":"mozdata/udf/#glean_timespan_nanos","text":"Friendly name: Glean Timespan Nanos Table Source | Metadata Source","title":"glean_timespan_nanos"},{"location":"mozdata/udf/#null_if_empty_list","text":"Return NULL if list is empty, otherwise return list. This cannot be done with NULLIF because NULLIF does not support arrays. Friendly name: Null If Empty List Table Source | Metadata Source","title":"null_if_empty_list"},{"location":"mozdata/udf/#country_code_to_flag","text":"For a given two-letter ISO 3166-1 alpha-2 country code, returns a string consisting of two Unicode regional indicator symbols, which is rendered in supporting fonts (such as in the BigQuery console or STMO) as flag emoji. This is just for fun. See: - https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2 - https://en.wikipedia.org/wiki/Regional_Indicator_Symbol Friendly name: Country Code To Flag Table Source | Metadata Source","title":"country_code_to_flag"},{"location":"mozdata/udf/#add_searches_by_index","text":"Return sums of each search type grouped by the index. Results are ordered by index. Friendly name: Add Searches By Index Table Source | Metadata Source","title":"add_searches_by_index"},{"location":"mozdata/udf/#array_of_12_zeroes","text":"An array of 12 zeroes Friendly name: Array Of 12 Zeroes Table Source | Metadata Source","title":"array_of_12_zeroes"},{"location":"mozdata/udf/#new_monthly_engine_searches_struct","text":"This struct represents the past year's worth of searches. Each month has its own entry, hence 12. Friendly name: New Monthly Engine Searches Struct Table Source | Metadata Source","title":"new_monthly_engine_searches_struct"},{"location":"mozdata/udf/#normalize_metadata","text":"Friendly name: Normalize Metadata Table Source | Metadata Source","title":"normalize_metadata"},{"location":"mozdata/udf/#pos_of_leading_set_bit","text":"Returns the 0-based index of the first set bit. No set bits returns NULL. Friendly name: Pos Of Leading Set Bit Table Source | Metadata Source","title":"pos_of_leading_set_bit"},{"location":"mozdata/udf/#shift_28_bits_one_day","text":"Shift input bits one day left and drop any bits beyond 28 days. Friendly name: Shift 28 Bits One Day Table Source | Metadata Source","title":"shift_28_bits_one_day"},{"location":"mozdata/udf/#bits28_to_string","text":"Friendly name: Bits28 To String Table Source | Metadata Source","title":"bits28_to_string"},{"location":"mozdata/udf/#kv_array_append_to_json_string","text":"Returns a JSON string which has the pair appended to the provided input JSON string. NULL is also valid for input . Examples: udf.kv_array_append_to_json_string('{\"foo\":\"bar\"}', [STRUCT(\"baz\" AS key, \"boo\" AS value)]) '{\"foo\":\"bar\",\"baz\":\"boo\"}' udf.kv_array_append_to_json_string('{}', [STRUCT(\"baz\" AS key, \"boo\" AS value)]) '{\"baz\": \"boo\"}' Friendly name: Kv Array Append To Json String Table Source | Metadata Source","title":"kv_array_append_to_json_string"},{"location":"mozdata/udf/#combine_experiment_days","text":"The \"clients_last_seen\" class of tables represent various types of client activity within a 28-day window as bit patterns. This function takes in two arrays of structs where each entry gives the bit pattern for days in which we saw a ping for a given user in a given experiment. We combine the bit patterns for the previous day and the current day, returning a single array of experiment structs. Friendly name: Combine Experiment Days Table Source | Metadata Source","title":"combine_experiment_days"},{"location":"mozdata/udf/#normalize_glean_ping_info","text":"Friendly name: Normalize Glean Ping Info Table Source | Metadata Source","title":"normalize_glean_ping_info"},{"location":"mozdata/udf/#shift_one_day","text":"Returns the bitfield shifted by one day, 0 for NULL Friendly name: Shift One Day Table Source | Metadata Source","title":"shift_one_day"},{"location":"mozdata/udf/#bits_to_days_seen","text":"Given a BYTE, get the number of days the user was seen. NULL input returns NULL output. Friendly name: Bits To Days Seen Table Source | Metadata Source","title":"bits_to_days_seen"},{"location":"mozdata/udf/#bitcount_lowest_7","text":"This function counts the 1s in lowest 7 bits of an INT64 Friendly name: Bitcount Lowest 7 Table Source | Metadata Source","title":"bitcount_lowest_7"},{"location":"mozdata/udf/#bits28_range","text":"Friendly name: Bits28 Range Table Source | Metadata Source","title":"bits28_range"},{"location":"mozdata/udf/#histogram_to_threshold_count","text":"Friendly name: Histogram To Threshold Count Table Source | Metadata Source","title":"histogram_to_threshold_count"},{"location":"mozdata/udf/#get_key_with_null","text":"Friendly name: Get Key With Null Table Source | Metadata Source","title":"get_key_with_null"},{"location":"mozdata/udf/#normalize_os","text":"Friendly name: Normalize Os Table Source | Metadata Source","title":"normalize_os"},{"location":"mozdata/udf/#active_n_weeks_ago","text":"Friendly name: Active N Weeks Ago Table Source | Metadata Source","title":"active_n_weeks_ago"},{"location":"mozdata/udf/#main_summary_scalars","text":"Friendly name: Main Summary Scalars Table Source | Metadata Source","title":"main_summary_scalars"},{"location":"mozdata/udf/#histogram_max_key_with_nonzero_value","text":"Find the largest numeric bucket that contains a value greater than zero. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L253-L266 Friendly name: Histogram Max Key With Nonzero Value Table Source | Metadata Source","title":"histogram_max_key_with_nonzero_value"},{"location":"mozdata/udf/#aggregate_map_first","text":"Returns an aggregated map with all the keys and the first corresponding value from the given maps Friendly name: Aggregate Map First Table Source | Metadata Source","title":"aggregate_map_first"},{"location":"mozdata/udf/#bits28_to_dates","text":"Friendly name: Bits28 To Dates Table Source | Metadata Source","title":"bits28_to_dates"},{"location":"mozdata/udf/#vector_add","text":"This function adds two vectors. The two vectors can have different length. If one vector is null, the other vector will be returned directly. Friendly name: Vector Add Table Source | Metadata Source","title":"vector_add"},{"location":"mozdata/udf/#keyed_histogram_get_sum","text":"Take a keyed histogram of type STRUCT<key STRING, value STRING>, extract the histogram of the given key, and return the sum value Friendly name: Keyed Histogram Get Sum Table Source | Metadata Source","title":"keyed_histogram_get_sum"},{"location":"mozdata/udf/#round_timestamp_to_minute","text":"Floor a timestamp object to the given minute interval. Friendly name: Round Timestamp To Minute Table Source | Metadata Source","title":"round_timestamp_to_minute"},{"location":"mozdata/udf/#add_monthly_searches","text":"Adds together two engine searches structs. Each engine searches struct has a MAP[engine -> search_counts_struct]. We want to add add together the prev and curr's values for a certain engine. This allows us to be flexible with the number of engines we're using. Friendly name: Add Monthly Searches Table Source | Metadata Source","title":"add_monthly_searches"},{"location":"mozdata/udf/#map_sum","text":"Friendly name: Map Sum Table Source | Metadata Source","title":"map_sum"},{"location":"mozdata/udf/#int_to_365_bits","text":"Friendly name: Int To 365 Bits Table Source | Metadata Source","title":"int_to_365_bits"},{"location":"mozdata/udf/#decode_int64","text":"Friendly name: Decode Int64 Table Source | Metadata Source","title":"decode_int64"},{"location":"mozdata/udf/#smoot_usage_from_28_bits","text":"Calculates a variety of metrics based on bit patterns of daily usage for the smoot_usage_* tables. Friendly name: Smoot Usage From 28 Bits Table Source | Metadata Source","title":"smoot_usage_from_28_bits"},{"location":"mozdata/udf/#extract_count_histogram_value","text":"Friendly name: Extract Count Histogram Value Table Source | Metadata Source","title":"extract_count_histogram_value"},{"location":"mozdata/udf/#array_slice","text":"Friendly name: Array Slice Table Source | Metadata Source","title":"array_slice"},{"location":"mozdata/udf/#dedupe_array","text":"Return an array containing only distinct values of the given array Friendly name: Dedupe Array Table Source | Metadata Source","title":"dedupe_array"},{"location":"mozdata/udf/#histogram_merge","text":"Friendly name: Histogram Merge Table Source | Metadata Source","title":"histogram_merge"},{"location":"mozdata/udf/#mode_last_retain_nulls","text":"Friendly name: Mode Last Retain Nulls Table Source | Metadata Source","title":"mode_last_retain_nulls"},{"location":"mozdata/udf/#bits_to_active_n_weeks_ago","text":"Given a BYTE and an INT64, return whether the user was active that many weeks ago. NULL input returns NULL output. Friendly name: Bits To Active N Weeks Ago Table Source | Metadata Source","title":"bits_to_active_n_weeks_ago"},{"location":"mozdata/udf/#event_code_points_to_string","text":"Table Source | Metadata Source","title":"event_code_points_to_string"},{"location":"mozdata/udf/#days_seen_bytes_to_rfm","text":"Return the frequency, recency, and T from a BYTE array, as defined in https://lifetimes.readthedocs.io/en/latest/Quickstart.html#the-shape-of-your-data RFM refers to Recency, Frequency, and Monetary value. Friendly name: Days Seen Bytes To Rfm Table Source | Metadata Source","title":"days_seen_bytes_to_rfm"},{"location":"mozdata/udf/#bits28_active_in_range","text":"Friendly name: Bits28 Active In Range Table Source | Metadata Source","title":"bits28_active_in_range"},{"location":"mozdata/udf/#mode_last","text":"Friendly name: Mode Last Table Source | Metadata Source","title":"mode_last"},{"location":"mozdata/udf/#geo_struct","text":"Convert geoip lookup fields to a struct, replacing '??' with NULL. Returns NULL if if required field country would be NULL. Replaces '??' with NULL because '??' is a placeholder that may be used if there was an issue during geoip lookup in hindsight. Friendly name: Geo Struct Table Source | Metadata Source","title":"geo_struct"},{"location":"mozdata/udf/#aggregate_search_map","text":"Aggregates the total counts of the given search counters Friendly name: Aggregate Search Map Table Source | Metadata Source","title":"aggregate_search_map"},{"location":"mozdata/udf/#quantile_search_metric_contribution","text":"This function returns how much of one metric is contributed by the quantile of another metric. Quantile variable should add an offset to get the requried percentile value. Example: udf.quantile_search_metric_contribution(sap, search_with_ads, sap_percentiles[OFFSET(9)]) It returns search_with_ads if sap value in top 10% volumn else null. Friendly name: Quantile Search Metric Contribution Table Source | Metadata Source","title":"quantile_search_metric_contribution"},{"location":"mozdata/udf/#array_11_zeroes_then","text":"An array of 11 zeroes, followed by a supplied value Friendly name: Array 11 Zeroes Then Table Source | Metadata Source","title":"array_11_zeroes_then"},{"location":"mozdata/udf/#aggregate_active_addons","text":"This function selects most frequently occuring value for each addon_id, using the latest value in the input among ties. The type for active_addons is ARRAY<STRUCT<addon_id STRING, ...>>, i.e. the output of SELECT ARRAY_CONCAT_AGG(active_addons) FROM telemetry.main_summary_v4 , and is left unspecified to allow changes to the fields of the STRUCT. Friendly name: Aggregate Active Addons Table Source | Metadata Source","title":"aggregate_active_addons"},{"location":"mozdata/udf/#extract_document_type","text":"Extract the document type from a table name e.g. _TABLE_SUFFIX. Friendly name: Extract Document Type Table Source | Metadata Source","title":"extract_document_type"},{"location":"mozdata/udf/#pos_of_trailing_set_bit","text":"Identical to bits28_days_since_seen. Returns a 0-based index of the rightmost set bit in the passed bit pattern or null if no bits are set (bits = 0). To determine this position, we take a bitwise AND of the bit pattern and its complement, then we determine the position of the bit via base-2 logarithm; see https://stackoverflow.com/a/42747608/1260237 Friendly name: Pos Of Trailing Set Bit Table Source | Metadata Source","title":"pos_of_trailing_set_bit"},{"location":"mozdata/udf/#bool_to_365_bits","text":"Convert a boolean to 365 bit byte array Friendly name: Bool To 365 Bits Table Source | Metadata Source","title":"bool_to_365_bits"},{"location":"mozdata/udf/#bits28_retention","text":"Friendly name: Bits28 Retention Table Source | Metadata Source","title":"bits28_retention"},{"location":"mozdata/udf/#combine_days_seen_maps","text":"The \"clients_last_seen\" class of tables represent various types of client activity within a 28-day window as bit patterns. This function takes in two arrays of structs (aka maps) where each entry gives the bit pattern for days in which we saw a ping for a given user in a given key. We combine the bit patterns for the previous day and the current day, returning a single map. See udf.combine_experiment_days for a more specific example of this approach. Friendly name: Combine Days Seen Maps Table Source | Metadata Source","title":"combine_days_seen_maps"},{"location":"mozdata/udf/#boolean_histogram_to_boolean","text":"Given histogram h, return TRUE if it has a value in the \"true\" bucket, or FALSE if it has a value in the \"false\" bucket, or NULL otherwise. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L309-L317 Friendly name: Boolean Histogram To Boolean Table Source | Metadata Source","title":"boolean_histogram_to_boolean"},{"location":"mozdata/udf/#zeroed_array","text":"Generates an array if all zeroes, of arbitrary length Friendly name: Zeroed Array Table Source | Metadata Source","title":"zeroed_array"},{"location":"mozdata/udf/#extract_schema_validation_path","text":"Return a path derived from an error message in payload_bytes_error Friendly name: Extract Schema Validation Path Table Source | Metadata Source","title":"extract_schema_validation_path"},{"location":"mozdata/udf/#bitmask_lowest_7","text":"Friendly name: Bitmask Lowest 7 Table Source | Metadata Source","title":"bitmask_lowest_7"},{"location":"mozdata/udf/#pack_event_properties","text":"Table Source | Metadata Source","title":"pack_event_properties"},{"location":"mozdata/udf/#bits_to_days_since_first_seen","text":"Given a BYTES, return the number of days since the client was first seen. If no bits are set, returns NULL, indicating we don't know. Otherwise the result is 0-indexed, meaning that for \\x01, it will return 0. Results showed this being between 5-10x faster than the simpler alternative: CREATE OR REPLACE FUNCTION udf.bits_to_days_since_first_seen(b BYTES) AS (( SELECT MAX(n) FROM UNNEST(GENERATE_ARRAY( 0, 8 * BYTE_LENGTH(b))) AS n WHERE BIT_COUNT(SUBSTR(b >> n, -1) & b'\\x01') > 0)); See also: bits_to_days_since_seen.sql Friendly name: Bits To Days Since First Seen Table Source | Metadata Source","title":"bits_to_days_since_first_seen"},{"location":"mozdata/udf/#coalesce_adjacent_days_365_bits","text":"Coalesce previous data's PCD with the new data's PCD. We generally want to believe only the first reasonable profile creation date that we receive from a client. Given bytes representing usage from the previous day and the current day, this function shifts the first argument by one day and returns either that value if non-zero and non-null, the current day value if non-zero and non-null, or else 0. Friendly name: Coalesce Adjacent Days 365 Bits Table Source | Metadata Source","title":"coalesce_adjacent_days_365_bits"},{"location":"mozdata/udf/#combine_adjacent_days_28_bits","text":"Combines two bit patterns. The first pattern represents activity over a 28-day period ending \"yesterday\". The second pattern represents activity as observed today (usually just 0 or 1). We shift the bits in the first pattern by one to set the new baseline as \"today\", then perform a bitwise OR of the two patterns. Friendly name: Combine Adjacent Days 28 Bits Table Source | Metadata Source","title":"combine_adjacent_days_28_bits"},{"location":"mozdata/udf/#extract_document_version","text":"Extract the document version from a table name e.g. _TABLE_SUFFIX. Friendly name: Extract Document Version Table Source | Metadata Source","title":"extract_document_version"},{"location":"mozdata/udf/#normalize_fenix_metrics","text":"Accepts a glean metrics struct as input and returns a modified struct that nulls out histograms for older versions of the Glean SDK that reported pathological binning; see https://bugzilla.mozilla.org/show_bug.cgi?id=1592930 Friendly name: Normalize Fenix Metrics Table Source | Metadata Source","title":"normalize_fenix_metrics"},{"location":"mozdata/udf/#bitmask_365","text":"A bitmask for 365 bits Friendly name: Bitmask 365 Table Source | Metadata Source","title":"bitmask_365"},{"location":"mozdata/udf/#array_drop_first_and_append","text":"Drop the first element of an array, and append the given element. Result is an array with the same length as the input. Friendly name: Array Drop First And Append Table Source | Metadata Source","title":"array_drop_first_and_append"},{"location":"mozdata/udf/#gzip_length_footer","text":"Given a gzip compressed byte string, extract the uncompressed size from the footer. WARNING: THIS FUNCTION IS NOT RELIABLE FOR ARBITRARY GZIP STREAMS. It should, however, be safe to use for checking the decompressed size of payload in payload_bytes_decoded (and NOT payload_bytes_raw) because that payload is produced by the decoder and limited to conditions where the footer is accurate. From https://stackoverflow.com/a/9213826 First, the only information about the uncompressed length is four bytes at the end of the gzip file (stored in little-endian order). By necessity, that is the length modulo 232. So if the uncompressed length is 4 GB or more, you won't know what the length is. You can only be certain that the uncompressed length is less than 4 GB if the compressed length is less than something like 232 / 1032 + 18, or around 4 MB. (1032 is the maximum compression factor of deflate.) Second, and this is worse, a gzip file may actually be a concatenation of multiple gzip streams. Other than decoding, there is no way to find where each gzip stream ends in order to look at the four-byte uncompressed length of that piece. (Which may be wrong anyway due to the first reason.) Third, gzip files will sometimes have junk after the end of the gzip stream (usually zeros). Then the last four bytes are not the length. Friendly name: Gzip Length Footer Table Source | Metadata Source","title":"gzip_length_footer"},{"location":"mozdata/udf/#json_extract_histogram","text":"Friendly name: Json Extract Histogram Table Source | Metadata Source","title":"json_extract_histogram"},{"location":"mozdata/udf/#zero_as_365_bits","text":"Zero represented as a 365-bit byte array Friendly name: Zero As 365 Bits Table Source | Metadata Source","title":"zero_as_365_bits"},{"location":"mozdata/udf/#parse_iso8601_date","text":"Take a ISO 8601 date or date and time string and return a DATE. Return null if parse fails. Possible formats: 2019-11-04, 2019-11-04T21:15:00+00:00, 2019-11-04T21:15:00Z, 20191104T211500Z Friendly name: Parse Iso8601 Date Table Source | Metadata Source","title":"parse_iso8601_date"},{"location":"mozdata/udf/#map_bing_revenue_country_to_country_code","text":"For use by LTV revenue join only. Maps the Bing country to a country code. Only keeps the country codes we want to aggregate on. Friendly name: Map Bing Revenue Country To Country Code Table Source | Metadata Source","title":"map_bing_revenue_country_to_country_code"},{"location":"mozdata/udf/#int_to_hex_string","text":"Friendly name: Int To Hex String Table Source | Metadata Source","title":"int_to_hex_string"},{"location":"mozdata/udf/#safe_sample_id","text":"Stably hash a client_id to an integer between 0 and 99, or NULL if client_id isn't 36 bytes Friendly name: Safe Sample Id Table Source | Metadata Source","title":"safe_sample_id"},{"location":"mozdata/udf/#get_key","text":"Friendly name: Get Key Table Source | Metadata Source","title":"get_key"},{"location":"mozdata/udf/#hmac_sha256","text":"Given a key and message, return the HMAC-SHA256 hash. This algorithm can be found in Wikipedia: https://en.wikipedia.org/wiki/HMAC#Implementation This implentation is validated against the NIST test vectors. See test/validation/hmac_sha256.py for more information. Friendly name: Hmac Sha256 Table Source | Metadata Source","title":"hmac_sha256"},{"location":"mozdata/udf/#bits28_from_string","text":"Friendly name: Bits28 From String Table Source | Metadata Source","title":"bits28_from_string"},{"location":"mozdata/udf/#merge_scalar_user_data","text":"Given an array of scalar metric data that might have duplicate values for a metric, merge them into one value. Friendly name: Merge Scalar User Data Table Source | Metadata Source","title":"merge_scalar_user_data"},{"location":"mozdata/udf/#bitmask_range","text":"Returns a bitmask that can be used to return a subset of an integer representing a bit array. The start_ordinal argument is an integer specifying the starting position of the slice, with start_ordinal = 1 indicating the first bit. The length argument is the number of bits to include in the mask. The arguments were chosen to match the semantics of the SUBSTR function; see https://cloud.google.com/bigquery/docs/reference/standard-sql/functions-and-operators#substr Friendly name: Bitmask Range Table Source | Metadata Source","title":"bitmask_range"},{"location":"mozdata/udf/#map_mode_last","text":"Friendly name: Map Mode Last Table Source | Metadata Source","title":"map_mode_last"},{"location":"mozdata/udf/#ga_is_mozilla_browser","text":"Determine if a browser in a Google Analytics data is produced by Mozilla Friendly name: Is Mozilla Browser Table Source | Metadata Source","title":"ga_is_mozilla_browser"},{"location":"mozdata/udf/#fenix_build_to_datetime","text":"Convert the Fenix client_info.app_build-format string to a DATETIME. May return NULL on failure. Fenix originally used an 8-digit app_build format In short it is yDDDHHmm : y is years since 2018 DDD is day of year, 0-padded, 001-366 HH is hour of day, 00-23 mm is minute of hour, 00-59 The last date seen with an 8-digit build ID is 2020-08-10. Newer builds use a 10-digit format where the integer represents a pattern consisting of 32 bits. The 17 bits starting 13 bits from the left represent a number of hours since UTC midnight beginning 2014-12-28. This function tolerates both formats. After using this you may wish to DATETIME_TRUNC(result, DAY) for grouping by build date. Friendly name: Fenix Build To Datetime Table Source | Metadata Source","title":"fenix_build_to_datetime"},{"location":"mozdata/udf/#bitmask_lowest_28","text":"Friendly name: Bitmask Lowest 28 Table Source | Metadata Source","title":"bitmask_lowest_28"},{"location":"mozdata/udf/#bits_from_offsets","text":"Returns a bit pattern of type BYTES compactly encoding the given array of positive integer offsets. This is primarily useful to generate a compact encoding of dates on which a feature was used, with arbitrarily long history. Example aggregation: sql bits_from_offsets( ARRAY_AGG(IF(foo, DATE_DIFF(anchor_date, submission_date, DAY), NULL) IGNORE NULLS) ) The resulting value can be cast to an INT64 representing the most recent 64 days via: sql CAST(CONCAT(&#39;0x&#39;, TO_HEX(RIGHT(bits &gt;&gt; i, 4))) AS INT64) Or representing the most recent 28 days (compatible with bits28 functions) via: sql CAST(CONCAT(&#39;0x&#39;, TO_HEX(RIGHT(bits &gt;&gt; i, 4))) AS INT64) &lt;&lt; 36 &gt;&gt; 36 Friendly name: Bits From Offsets Table Source | Metadata Source","title":"bits_from_offsets"},{"location":"mozdata/udf/#normalize_glean_baseline_client_info","text":"Friendly name: Normalize Glean Baseline Client Info Table Source | Metadata Source","title":"normalize_glean_baseline_client_info"},{"location":"mozdata/udf/#normalize_monthly_searches","text":"Sum up the monthy search count arrays by normalized engine Friendly name: Normalize Monthly Searches Table Source | Metadata Source","title":"normalize_monthly_searches"},{"location":"mozdata/udf/#parse_desktop_telemetry_uri","text":"Parses and labels the components of a telemetry desktop ping submission uri Per https://docs.telemetry.mozilla.org/concepts/pipeline/http_edge_spec.html#special-handling-for-firefox-desktop-telemetry the format is /submit/telemetry/docId/docType/appName/appVersion/appUpdateChannel/appBuildID e.g. /submit/telemetry/ce39b608-f595-4c69-b6a6-f7a436604648/main/Firefox/61.0a1/nightly/20180328030202 Friendly name: Parse Desktop Telemetry Uri Table Source | Metadata Source","title":"parse_desktop_telemetry_uri"},{"location":"mozdata/udf/#normalize_main_payload","text":"Accepts a pipeline metadata struct as input and returns a modified struct that includes a few parsed or normalized variants of the input metadata fields. Friendly name: Normalize Main Payload Table Source | Metadata Source","title":"normalize_main_payload"},{"location":"mozdata/udf/#map_revenue_country","text":"Only for use by the LTV Revenue join. Maps country codes to the codes we have in the revenue dataset. Buckets small Bing countries into \"other\". Friendly name: Map Revenue Country Table Source | Metadata Source","title":"map_revenue_country"},{"location":"mozdata/udf/#glean_timespan_seconds","text":"Friendly name: Glean Timespan Seconds Table Source | Metadata Source","title":"glean_timespan_seconds"},{"location":"mozdata/udf/#aggregate_search_counts","text":"Friendly name: Aggregate Search Counts Table Source | Metadata Source","title":"aggregate_search_counts"},{"location":"mozdata/udf/#kv_array_to_json_string","text":"Returns a JSON string representing the input key-value array. Value type must be able to be represented as a string - this function will cast to a string. At Mozilla, the schema for a map is STRUCT<key_value ARRAY<STRUCT<key ANY TYPE, value ANY TYPE>>>. To use this with that representation, it should be as udf.kv_array_to_json_string(struct.key_value) . Friendly name: Kv Array To Json String Table Source | Metadata Source","title":"kv_array_to_json_string"},{"location":"mozdata/udf/#combine_adjacent_days_365_bits","text":"Friendly name: Combine Adjacent Days 365 Bits Table Source | Metadata Source","title":"combine_adjacent_days_365_bits"},{"location":"mozdata/udf/#one_as_365_bits","text":"One represented as a byte array of 365 bits Friendly name: One As 365 Bits Table Source | Metadata Source","title":"one_as_365_bits"},{"location":"mozdata/udf/#deanonymize_event","text":"Rename struct fields in anonymous event tuples to meaningful names. Friendly name: Deanonymize Event Table Source | Metadata Source","title":"deanonymize_event"},{"location":"mozdata/udf/#mod_uint128","text":"This function returns \"dividend mod divisor\" where the dividend and the result is encoded in bytes, and divisor is an integer. Friendly name: Mod Uint128 Table Source | Metadata Source","title":"mod_uint128"},{"location":"mozdata/udf/#add_monthly_engine_searches","text":"This function specifically windows searches into calendar-month windows. This means groups are not necessarily directly comparable, since different months have different numbers of days. On the first of each month, a new month is appended, and the first month is dropped. If the date is not the first of the month, the new entry is added to the last element in the array. For example, if we were adding 12 to [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]: On the first of the month, the result would be [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12] On any other day of the month, the result would be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 24] This happens for every aggregate (searches, ad clicks, etc.) Friendly name: Add Monthly Engine Searches Table Source | Metadata Source","title":"add_monthly_engine_searches"},{"location":"mozdata/udf/#shift_365_bits_one_day","text":"Shift input bits one day left and drop any bits beyond 365 days. Friendly name: Shift 365 Bits One Day Table Source | Metadata Source","title":"shift_365_bits_one_day"},{"location":"mozdata/udf/#json_extract_int_map","text":"Friendly name: Json Extract Int Map Table Source | Metadata Source","title":"json_extract_int_map"},{"location":"mozdata/udf/#histogram_percentiles","text":"Friendly name: Histogram Percentiles Table Source | Metadata Source","title":"histogram_percentiles"},{"location":"mozdata/udf/#normalize_search_engine","text":"Return normalized engine name for recognized engines Friendly name: Normalize Search Engine Table Source | Metadata Source","title":"normalize_search_engine"},{"location":"mozdata/udf/#safe_crc32_uuid","text":"Calculate the CRC-32 hash of a 36-byte UUID, or NULL if the value isn't 36 bytes. This implementation is limited to an exact length because recursion does not work. Based on https://stackoverflow.com/a/18639999/1260237 See https://en.wikipedia.org/wiki/Cyclic_redundancy_check Friendly name: Safe CRC-32 Uuid Table Source | Metadata Source","title":"safe_crc32_uuid"},{"location":"mozdata/udf/#extract_histogram_sum","text":"This is a performance optimization compared to the more general mozfun.hist.extract for cases where only the histogram sum is needed. It must support all the same format variants as mozfun.hist.extract but this simplification is necessary to keep the main_summary query complexity in check. Friendly name: Extract Histogram Sum Table Source | Metadata Source","title":"extract_histogram_sum"},{"location":"mozdata/udf/#histogram_normalize","text":"Friendly name: Histogram Normalize Table Source | Metadata Source","title":"histogram_normalize"},{"location":"mozdata/udf_js/","text":"jackknife_sum_ci Calculates a confidence interval using a jackknife resampling technique for the sum of an array of counts for various buckets; see https://en.wikipedia.org/wiki/Jackknife_resampling Users must specify the number of expected buckets as the first parameter to guard against the case where empty buckets lead to an array with missing elements. Usage generally involves first calculating an aggregate count per bucket, then aggregating over buckets, passing ARRAY_AGG(metric) to this function. Example: WITH bucketed AS ( SELECT submission_date, SUM(dau) AS dau_sum FROM mytable GROUP BY submission_date, bucket_id ) SELECT submission_date, udf_js.jackknife_sum_ci(ARRAY_AGG(dau_sum)).* FROM bucketed GROUP BY submission_date Friendly name: Jackknife Sum Ci Table Source | Metadata Source json_extract_keyed_histogram Returns an array of parsed structs from a JSON string representing a keyed histogram. This is likely only useful for histograms that weren't properly parsed to fields, so ended up embedded in an additional_properties JSON blob. Normally, keyed histograms will be modeled as a key/value struct where the values are JSON representations of single histograms. There is no pure SQL equivalent to this function, since BigQuery does not provide any functions for listing or iterating over keysn in a JSON map. Friendly name: Json Extract Keyed Histogram Table Source | Metadata Source main_summary_addon_scalars Parse scalars from payload.processes.dynamic into map columns for each value type. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c00df191501b39d2c4e2ece3fe703a0ef3/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L385-L399 Friendly name: Main Summary Addon Scalars Table Source | Metadata Source jackknife_ratio_ci Calculates a confidence interval using a jackknife resampling technique for the weighted mean of an array of ratios for various buckets; see https://en.wikipedia.org/wiki/Jackknife_resampling Users must specify the number of expected buckets as the first parameter to guard against the case where empty buckets lead to an array with missing elements. Usage generally involves first calculating an aggregate per bucket, then aggregating over buckets, passing ARRAY_AGG(metric) to this function. Example: WITH bucketed AS ( SELECT submission_date, SUM(active_days_in_week) AS active_days_in_week, SUM(wau) AS wau FROM mytable GROUP BY submission_date, bucket_id ) SELECT submission_date, udf_js.jackknife_ratio_ci(20, ARRAY_AGG(STRUCT(CAST(active_days_in_week AS float64), CAST(wau as FLOAT64)))) AS intensity FROM bucketed GROUP BY submission_date Friendly name: Jackknife Ratio Ci Table Source | Metadata Source json_extract_events Friendly name: Json Extract Events Table Source | Metadata Source json_extract_missing_cols Extract missing columns from additional properties. More generally, get a list of nodes from a JSON blob. Array elements are indicated as [...]. param input: The JSON blob to explode param indicates_node: An array of strings. If a key's value is an object, and contains one of these values, that key is returned as a node. param known_nodes: An array of strings. If a key is in this array, it is returned as a node. Notes: - Use indicates_node for things like histograms. For example ['histogram_type'] will ensure that each histogram will be returned as a missing node, rather than the subvalues within the histogram (e.g. values, sum, etc.) - Use known_nodes if you're aware of a missing section, like ['simpleMeasurements'] See here for an example usage https://sql.telemetry.mozilla.org/queries/64460/source Friendly name: Json Extract Missing Cols Table Source | Metadata Source crc32 Calculate the CRC-32 hash of an input string. The implementation here could be optimized. In particular, it calculates a lookup table on every invocation which could be cached and reused. In practice, though, this implementation appears to be fast enough that further optimization is not yet warranted. Based on https://stackoverflow.com/a/18639999/1260237 See https://en.wikipedia.org/wiki/Cyclic_redundancy_check Friendly name: CRC-32 Table Source | Metadata Source jackknife_mean_ci Calculates a confidence interval using a jackknife resampling technique for the mean of an array of values for various buckets; see https://en.wikipedia.org/wiki/Jackknife_resampling Users must specify the number of expected buckets as the first parameter to guard against the case where empty buckets lead to an array with missing elements. Usage generally involves first calculating an aggregate per bucket, then aggregating over buckets, passing ARRAY_AGG(metric) to this function. Friendly name: Jackknife Mean Ci Table Source | Metadata Source main_summary_disabled_addons Report the ids of the addons which are in the addonDetails but not in the activeAddons. They are the disabled addons (possibly because they are legacy). We need this as addonDetails may contain both disabled and active addons. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c00df191501b39d2c4e2ece3fe703a0ef3/src/main/scala/com/mozilla/telemetry/views/MainSummaryView.scala#L451-L464 Friendly name: Main Summary Disabled Addons Table Source | Metadata Source json_extract_histogram Returns a parsed struct from a JSON string representing a histogram. This implementation uses JavaScript and is provided for performance comparison; see udf/udf_json_extract_histogram for a pure SQL implementation that will likely be more usable in practice. Friendly name: Json Extract Histogram Table Source | Metadata Source main_summary_active_addons Add fields from additional_attributes to active_addons in main_v4. Return an array instead of a \"map\" for backwards compatibility. The INT64 columns from BigQuery may be passed as strings, so parseInt before returning them if they will be coerced to BOOL. The fields from additional_attributes due to union types: integer or boolean for foreignInstall and userDisabled; string or number for version. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c00df191501b39d2c4e2ece3fe703a0ef3/src/main/scala/com/mozilla/telemetry/views/MainSummaryView.scala#L422-L449 Friendly name: Main Summary Active Addons Table Source | Metadata Source sample_id Stably hash a client_id to an integer between 0 and 99. This function is technically defined in SQL, but it calls a JS UDF implementation of a CRC-32 hash, so we defined it here to make it clear that its performance may be limited by BigQuery's JavaScript UDF environment. Friendly name: Sample Id Table Source | Metadata Source gunzip Unzips a GZIP string. This implementation relies on the zlib.js library (https://github.com/imaya/zlib.js) and the atob function for decoding base64. Friendly name: Gunzip Table Source | Metadata Source","title":"udf_js"},{"location":"mozdata/udf_js/#jackknife_sum_ci","text":"Calculates a confidence interval using a jackknife resampling technique for the sum of an array of counts for various buckets; see https://en.wikipedia.org/wiki/Jackknife_resampling Users must specify the number of expected buckets as the first parameter to guard against the case where empty buckets lead to an array with missing elements. Usage generally involves first calculating an aggregate count per bucket, then aggregating over buckets, passing ARRAY_AGG(metric) to this function. Example: WITH bucketed AS ( SELECT submission_date, SUM(dau) AS dau_sum FROM mytable GROUP BY submission_date, bucket_id ) SELECT submission_date, udf_js.jackknife_sum_ci(ARRAY_AGG(dau_sum)).* FROM bucketed GROUP BY submission_date Friendly name: Jackknife Sum Ci Table Source | Metadata Source","title":"jackknife_sum_ci"},{"location":"mozdata/udf_js/#json_extract_keyed_histogram","text":"Returns an array of parsed structs from a JSON string representing a keyed histogram. This is likely only useful for histograms that weren't properly parsed to fields, so ended up embedded in an additional_properties JSON blob. Normally, keyed histograms will be modeled as a key/value struct where the values are JSON representations of single histograms. There is no pure SQL equivalent to this function, since BigQuery does not provide any functions for listing or iterating over keysn in a JSON map. Friendly name: Json Extract Keyed Histogram Table Source | Metadata Source","title":"json_extract_keyed_histogram"},{"location":"mozdata/udf_js/#main_summary_addon_scalars","text":"Parse scalars from payload.processes.dynamic into map columns for each value type. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c00df191501b39d2c4e2ece3fe703a0ef3/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L385-L399 Friendly name: Main Summary Addon Scalars Table Source | Metadata Source","title":"main_summary_addon_scalars"},{"location":"mozdata/udf_js/#jackknife_ratio_ci","text":"Calculates a confidence interval using a jackknife resampling technique for the weighted mean of an array of ratios for various buckets; see https://en.wikipedia.org/wiki/Jackknife_resampling Users must specify the number of expected buckets as the first parameter to guard against the case where empty buckets lead to an array with missing elements. Usage generally involves first calculating an aggregate per bucket, then aggregating over buckets, passing ARRAY_AGG(metric) to this function. Example: WITH bucketed AS ( SELECT submission_date, SUM(active_days_in_week) AS active_days_in_week, SUM(wau) AS wau FROM mytable GROUP BY submission_date, bucket_id ) SELECT submission_date, udf_js.jackknife_ratio_ci(20, ARRAY_AGG(STRUCT(CAST(active_days_in_week AS float64), CAST(wau as FLOAT64)))) AS intensity FROM bucketed GROUP BY submission_date Friendly name: Jackknife Ratio Ci Table Source | Metadata Source","title":"jackknife_ratio_ci"},{"location":"mozdata/udf_js/#json_extract_events","text":"Friendly name: Json Extract Events Table Source | Metadata Source","title":"json_extract_events"},{"location":"mozdata/udf_js/#json_extract_missing_cols","text":"Extract missing columns from additional properties. More generally, get a list of nodes from a JSON blob. Array elements are indicated as [...]. param input: The JSON blob to explode param indicates_node: An array of strings. If a key's value is an object, and contains one of these values, that key is returned as a node. param known_nodes: An array of strings. If a key is in this array, it is returned as a node. Notes: - Use indicates_node for things like histograms. For example ['histogram_type'] will ensure that each histogram will be returned as a missing node, rather than the subvalues within the histogram (e.g. values, sum, etc.) - Use known_nodes if you're aware of a missing section, like ['simpleMeasurements'] See here for an example usage https://sql.telemetry.mozilla.org/queries/64460/source Friendly name: Json Extract Missing Cols Table Source | Metadata Source","title":"json_extract_missing_cols"},{"location":"mozdata/udf_js/#crc32","text":"Calculate the CRC-32 hash of an input string. The implementation here could be optimized. In particular, it calculates a lookup table on every invocation which could be cached and reused. In practice, though, this implementation appears to be fast enough that further optimization is not yet warranted. Based on https://stackoverflow.com/a/18639999/1260237 See https://en.wikipedia.org/wiki/Cyclic_redundancy_check Friendly name: CRC-32 Table Source | Metadata Source","title":"crc32"},{"location":"mozdata/udf_js/#jackknife_mean_ci","text":"Calculates a confidence interval using a jackknife resampling technique for the mean of an array of values for various buckets; see https://en.wikipedia.org/wiki/Jackknife_resampling Users must specify the number of expected buckets as the first parameter to guard against the case where empty buckets lead to an array with missing elements. Usage generally involves first calculating an aggregate per bucket, then aggregating over buckets, passing ARRAY_AGG(metric) to this function. Friendly name: Jackknife Mean Ci Table Source | Metadata Source","title":"jackknife_mean_ci"},{"location":"mozdata/udf_js/#main_summary_disabled_addons","text":"Report the ids of the addons which are in the addonDetails but not in the activeAddons. They are the disabled addons (possibly because they are legacy). We need this as addonDetails may contain both disabled and active addons. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c00df191501b39d2c4e2ece3fe703a0ef3/src/main/scala/com/mozilla/telemetry/views/MainSummaryView.scala#L451-L464 Friendly name: Main Summary Disabled Addons Table Source | Metadata Source","title":"main_summary_disabled_addons"},{"location":"mozdata/udf_js/#json_extract_histogram","text":"Returns a parsed struct from a JSON string representing a histogram. This implementation uses JavaScript and is provided for performance comparison; see udf/udf_json_extract_histogram for a pure SQL implementation that will likely be more usable in practice. Friendly name: Json Extract Histogram Table Source | Metadata Source","title":"json_extract_histogram"},{"location":"mozdata/udf_js/#main_summary_active_addons","text":"Add fields from additional_attributes to active_addons in main_v4. Return an array instead of a \"map\" for backwards compatibility. The INT64 columns from BigQuery may be passed as strings, so parseInt before returning them if they will be coerced to BOOL. The fields from additional_attributes due to union types: integer or boolean for foreignInstall and userDisabled; string or number for version. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c00df191501b39d2c4e2ece3fe703a0ef3/src/main/scala/com/mozilla/telemetry/views/MainSummaryView.scala#L422-L449 Friendly name: Main Summary Active Addons Table Source | Metadata Source","title":"main_summary_active_addons"},{"location":"mozdata/udf_js/#sample_id","text":"Stably hash a client_id to an integer between 0 and 99. This function is technically defined in SQL, but it calls a JS UDF implementation of a CRC-32 hash, so we defined it here to make it clear that its performance may be limited by BigQuery's JavaScript UDF environment. Friendly name: Sample Id Table Source | Metadata Source","title":"sample_id"},{"location":"mozdata/udf_js/#gunzip","text":"Unzips a GZIP string. This implementation relies on the zlib.js library (https://github.com/imaya/zlib.js) and the atob function for decoding base64. Friendly name: Gunzip Table Source | Metadata Source","title":"gunzip"},{"location":"mozdata/udf_js_lib/","text":"udf_js_lib Table Source","title":"udf_js_lib"},{"location":"mozdata/udf_js_lib/#udf_js_lib","text":"Table Source","title":"udf_js_lib"},{"location":"mozdata/udf_legacy/","text":"udf_legacy Table Source","title":"udf_legacy"},{"location":"mozdata/udf_legacy/#udf_legacy","text":"Table Source","title":"udf_legacy"},{"location":"mozfun/about/","text":"mozfun mozfun is a public GCP project provisioning publicly accessible user-defined functions (UDFs) and other function-like resources.","title":"mozfun"},{"location":"mozfun/about/#mozfun","text":"mozfun is a public GCP project provisioning publicly accessible user-defined functions (UDFs) and other function-like resources.","title":"mozfun"},{"location":"mozfun/bits28/","text":"bits28 The bits28 functions provide an API for working with \"bit pattern\" INT64 fields, as used in the clients_last_seen dataset for desktop Firefox and similar datasets for other applications. A powerful feature of the clients_last_seen methodology is that it doesn't record specific metrics like MAU and WAU directly, but rather each row stores a history of the discrete days on which a client was active in the past 28 days. We could calculate active users in a 10 day or 25 day window just as efficiently as a 7 day (WAU) or 28 day (MAU) window. But we can also define completely new metrics based on these usage histories, such as various retention definitions. The usage history is encoded as a \"bit pattern\" where the physical type of the field is a BigQuery INT64, but logically the integer represents an array of bits, with each 1 indicating a day where the given clients was active and each 0 indicating a day where the client was inactive. to_string (UDF) Convert an INT64 field into a 28-character string representing the individual bits. Implementation based on https://stackoverflow.com/a/51600210/1260237 See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference SELECT [mozfun.bits28.to_string(1), mozfun.bits28.to_string(2), mozfun.bits28.to_string(3)] -- >>> ['0000000000000000000000000001', -- '0000000000000000000000000010', -- '0000000000000000000000000011'] Source | Edit days_since_seen (UDF) Return the position of the rightmost set bit in an INT64 bit pattern. To determine this position, we take a bitwise AND of the bit pattern and its complement, then we determine the position of the bit via base-2 logarithm; see https://stackoverflow.com/a/42747608/1260237 See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference SELECT mozfun.bits28.days_since_seen(18) -- >> 1 Source | Edit retention (UDF) Return a nested struct providing booleans indicating whether a given client was active various time periods based on the passed bit pattern. Source | Edit active_in_range (UDF) Return a boolean indicating if any bits are set in the specified range of a bit pattern. The start_offset must be zero or a negative number indicating an offset from the rightmost bit in the pattern. n_bits is the number of bits to consider, counting right from the bit at start_offset . See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference Source | Edit to_dates (UDF) Convert a bit pattern into an array of the dates is represents. See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference Source | Edit range (UDF) Return an INT64 representing a range of bits from a source bit pattern. The start_offset must be zero or a negative number indicating an offset from the rightmost bit in the pattern. n_bits is the number of bits to consider, counting right from the bit at start_offset. See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference SELECT -- Signature is bits28.range(offset_to_day_0, start_bit, number_of_bits) mozfun.bits28.range(days_seen_bits, -13 + 0, 7) AS week_0_bits, mozfun.bits28.range(days_seen_bits, -13 + 7, 7) AS week_1_bits FROM telemetry.clients_last_seen WHERE submission_date > '2020-01-01' Source | Edit from_string (UDF) Convert a string representing individual bits into an INT64. Implementation based on https://stackoverflow.com/a/51600210/1260237 See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference Source | Edit","title":"bits28"},{"location":"mozfun/bits28/#bits28","text":"The bits28 functions provide an API for working with \"bit pattern\" INT64 fields, as used in the clients_last_seen dataset for desktop Firefox and similar datasets for other applications. A powerful feature of the clients_last_seen methodology is that it doesn't record specific metrics like MAU and WAU directly, but rather each row stores a history of the discrete days on which a client was active in the past 28 days. We could calculate active users in a 10 day or 25 day window just as efficiently as a 7 day (WAU) or 28 day (MAU) window. But we can also define completely new metrics based on these usage histories, such as various retention definitions. The usage history is encoded as a \"bit pattern\" where the physical type of the field is a BigQuery INT64, but logically the integer represents an array of bits, with each 1 indicating a day where the given clients was active and each 0 indicating a day where the client was inactive.","title":"bits28"},{"location":"mozfun/bits28/#to_string-udf","text":"Convert an INT64 field into a 28-character string representing the individual bits. Implementation based on https://stackoverflow.com/a/51600210/1260237 See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference SELECT [mozfun.bits28.to_string(1), mozfun.bits28.to_string(2), mozfun.bits28.to_string(3)] -- >>> ['0000000000000000000000000001', -- '0000000000000000000000000010', -- '0000000000000000000000000011'] Source | Edit","title":"to_string (UDF)"},{"location":"mozfun/bits28/#days_since_seen-udf","text":"Return the position of the rightmost set bit in an INT64 bit pattern. To determine this position, we take a bitwise AND of the bit pattern and its complement, then we determine the position of the bit via base-2 logarithm; see https://stackoverflow.com/a/42747608/1260237 See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference SELECT mozfun.bits28.days_since_seen(18) -- >> 1 Source | Edit","title":"days_since_seen (UDF)"},{"location":"mozfun/bits28/#retention-udf","text":"Return a nested struct providing booleans indicating whether a given client was active various time periods based on the passed bit pattern. Source | Edit","title":"retention (UDF)"},{"location":"mozfun/bits28/#active_in_range-udf","text":"Return a boolean indicating if any bits are set in the specified range of a bit pattern. The start_offset must be zero or a negative number indicating an offset from the rightmost bit in the pattern. n_bits is the number of bits to consider, counting right from the bit at start_offset . See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference Source | Edit","title":"active_in_range (UDF)"},{"location":"mozfun/bits28/#to_dates-udf","text":"Convert a bit pattern into an array of the dates is represents. See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference Source | Edit","title":"to_dates (UDF)"},{"location":"mozfun/bits28/#range-udf","text":"Return an INT64 representing a range of bits from a source bit pattern. The start_offset must be zero or a negative number indicating an offset from the rightmost bit in the pattern. n_bits is the number of bits to consider, counting right from the bit at start_offset. See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference SELECT -- Signature is bits28.range(offset_to_day_0, start_bit, number_of_bits) mozfun.bits28.range(days_seen_bits, -13 + 0, 7) AS week_0_bits, mozfun.bits28.range(days_seen_bits, -13 + 7, 7) AS week_1_bits FROM telemetry.clients_last_seen WHERE submission_date > '2020-01-01' Source | Edit","title":"range (UDF)"},{"location":"mozfun/bits28/#from_string-udf","text":"Convert a string representing individual bits into an INT64. Implementation based on https://stackoverflow.com/a/51600210/1260237 See detailed docs for the bits28 suite of functions: https://docs.telemetry.mozilla.org/cookbooks/clients_last_seen_bits.html#udf-reference Source | Edit","title":"from_string (UDF)"},{"location":"mozfun/event_analysis/","text":"event_analysis These functions are specific for use with the events_daily and event_types tables. By themselves, these two tables are nearly impossible to use since the event history is compressed; however, these stored procedures should make the data accessible. The events_daily table is created as a result of two steps: 1. Map each event to a single UTF8 char which will represent it 2. Group each client-day and store a string that records, using the compressed format, that clients' event history for that day. The characters are ordered by the timestamp which they appeared that day. The best way to access this data is to create a view to do the heavy lifting. For example, to see which clients completed a certain action, you can create a view using these functions that knows what that action's representation is (using the compressed mapping from 1.) and create a regex string that checks for the presence of that event. The view makes this transparent, and allows users to simply query a boolean field representing the presence of that event on that day. create_events_view (Stored Procedure) Create a view that queries the events_daily table. This view currently supports both funnels and event counts. Funnels are created as a struct, with each step in the funnel as a boolean column in the struct, indicating whether the user completed that step on that day. Event counts are simply integers. Usage create_events_view( view_name STRING, project STRING, dataset STRING, funnels ARRAY<STRUCT< funnel_name STRING, funnel ARRAY<STRUCT< step_name STRING, events ARRAY<STRUCT< category STRING, event_name STRING>>>>>>, counts ARRAY<STRUCT< count_name STRING, events ARRAY<STRUCT< category STRING, event_name STRING>>>> ) view_name : The name of the view that will be created. This view will be in the shared-prod project, in the analysis bucket, and so will be queryable at: sql `moz-fx-data-shared-prod`.analysis.{view_name} project : The project where the dataset is located. dataset : The dataset that must contain both the events_daily and event_types tables. funnels : An array of funnels that will be created. Each funnel has two parts: funnel_name : The name of the funnel is what the column representing the funnel will be named in the view. For example, with the value \"onboarding\" , the view can be selected as follows: sql SELECT onboarding FROM `moz-fx-data-shared-prod`.analysis.{view_name} funnel : The ordered series of steps that make up a funnel. Each step also has: step_name : Used to name the column within the funnel and represents whether the user completed that step on that day. For example, within onboarding a user may have completed_first_card as a step; this can be queried at sql SELECT onboarding.completed_first_step FROM `moz-fx-data-shared-prod`.analysis.{view_name} events : The set of events which indicate the user completed that step of the funnel. Most of the time this is a single event. Each event has a category and event_name . counts : An array of counts. Each count has two parts, similar to funnel steps: count_name : Used to name the column representing the event count. E.g. \"clicked_settings_count\" would be queried at sql SELECT clicked_settings_count FROM `moz-fx-data-shared-prod`.analysis.{view_name} events : The set of events you want to count. Each event has a category and event_name . Recommended Pattern Because the view definitions themselves are not informative about the contents of the events fields, it is best to put your query immediately after the procedure invocation, rather than invoking the procedure and running a separate query. This STMO query is an example of doing so. This allows viewers of the query to easily interpret what the funnel and count columns represent. Structure of the Resulting View The view will be created at `moz-fx-data-shared-prod`.analysis.{event_name}. The view will have a schema roughly matching the following: root |-- submission_date: date |-- client_id: string |-- {funnel_1_name}: record | |-- {funnel_step_1_name} boolean | |-- {funnel_step_2_name} boolean ... |-- {funnel_N_name}: record | |-- {funnel_step_M_name}: boolean |-- {count_1_name}: integer ... |-- {count_N_name}: integer ...dimensions... Funnels Each funnel will be a STRUCT with nested columns representing completion of each step The types of those columns are boolean, and represent whether the user completed that step on that day. STRUCT( completed_step_1 BOOLEAN, completed_step_2 BOOLEAN, ... ) AS funnel_name With one row per-user per-day, you can use COUNTIF(funnel_name.completed_step_N) to query these fields. See below for an example. Event Counts Each event count is simply an INT64 representing the number of times the user completed those events on that day. If there are multiple events represented within one count, the values are summed. For example, if you wanted to know the number of times a user opened or closed the app, you could create a single event count with those two events. event_count_name INT64 Examples The following creates a few fields: - collection_flow is a funnel for those that started creating a collection within Fenix, and then finished, either by adding those tabs to an existing collection or saving it as a new collection. - collection_flow_saved represents users who started the collection flow then saved it as a new collection. - number_of_collections_created is the number of collections created - number_of_collections_deleted is the number of collections deleted CALL mozfun.event_analysis.create_events_view( 'fenix_collection_funnels', 'moz-fx-data-shared-prod', 'org_mozilla_firefox', -- Funnels [ STRUCT( \"collection_flow\" AS funnel_name, [STRUCT( \"started_collection_creation\" AS step_name, [STRUCT('collections' AS category, 'tab_select_opened' AS event_name)] AS events), STRUCT( \"completed_collection_creation\" AS step_name, [STRUCT('collections' AS category, 'saved' AS event_name), STRUCT('collections' AS category, 'tabs_added' AS event_name)] AS events) ] AS funnel), STRUCT( \"collection_flow_saved\" AS funnel_name, [STRUCT( \"started_collection_creation\" AS step_name, [STRUCT('collections' AS category, 'tab_select_opened' AS event_name)] AS events), STRUCT( \"saved_collection\" AS step_name, [STRUCT('collections' AS category, 'saved' AS event_name)] AS events) ] AS funnel) ], -- Event Counts [ STRUCT( \"number_of_collections_created\" AS count_name, [STRUCT('collections' AS category, 'saved' AS event_name)] AS events ), STRUCT( \"number_of_collections_deleted\" AS count_name, [STRUCT('collections' AS category, 'removed' AS event_name)] AS events ) ] ); From there, you can query a few things. For example, the fraction of users who completed each step of the collection flow over time: SELECT submission_date, COUNTIF(collection_flow.started_collection_creation) / COUNT(*) AS started_collection_creation, COUNTIF(collection_flow.completed_collection_creation) / COUNT(*) AS completed_collection_creation, FROM `moz-fx-data-shared-prod`.analysis.fenix_collection_funnels WHERE submission_date >= DATE_SUB(current_date, INTERVAL 28 DAY) GROUP BY submission_date Or you can see the number of collections created and deleted: SELECT submission_date, SUM(number_of_collections_created) AS number_of_collections_created, SUM(number_of_collections_deleted) AS number_of_collections_deleted, FROM `moz-fx-data-shared-prod`.analysis.fenix_collection_funnels WHERE submission_date >= DATE_SUB(current_date, INTERVAL 28 DAY) GROUP BY submission_date Source | Edit extract_event_counts (UDF) Extract the events and their counts from an events string. This function explicitly ignores event properties, and retrieves just the counts of the top-level events. Usage extract_event_counts( events STRING ) events - A comma-separated events string, where each event is represented as a string of unicode chars. Example See this dashboard for example usage. Source | Edit extract_event_counts_with_properties (UDF) Extract events with event properties and their associated counts. Also extracts raw events and their counts. This allows for querying with and without properties in the same dashboard. Usage extract_event_counts_with_properties( events STRING ) events - A comma-separated events string, where each event is represented as a string of unicode chars. Example See this query for example usage. Caveats This function extracts both counts for events with each property, and for all events without their properties. This allows us to include both total counts for an event (with any property value), and events that don't have properties. Source | Edit","title":"event_analysis"},{"location":"mozfun/event_analysis/#event_analysis","text":"These functions are specific for use with the events_daily and event_types tables. By themselves, these two tables are nearly impossible to use since the event history is compressed; however, these stored procedures should make the data accessible. The events_daily table is created as a result of two steps: 1. Map each event to a single UTF8 char which will represent it 2. Group each client-day and store a string that records, using the compressed format, that clients' event history for that day. The characters are ordered by the timestamp which they appeared that day. The best way to access this data is to create a view to do the heavy lifting. For example, to see which clients completed a certain action, you can create a view using these functions that knows what that action's representation is (using the compressed mapping from 1.) and create a regex string that checks for the presence of that event. The view makes this transparent, and allows users to simply query a boolean field representing the presence of that event on that day.","title":"event_analysis"},{"location":"mozfun/event_analysis/#create_events_view-stored-procedure","text":"Create a view that queries the events_daily table. This view currently supports both funnels and event counts. Funnels are created as a struct, with each step in the funnel as a boolean column in the struct, indicating whether the user completed that step on that day. Event counts are simply integers.","title":"create_events_view (Stored Procedure)"},{"location":"mozfun/event_analysis/#usage","text":"create_events_view( view_name STRING, project STRING, dataset STRING, funnels ARRAY<STRUCT< funnel_name STRING, funnel ARRAY<STRUCT< step_name STRING, events ARRAY<STRUCT< category STRING, event_name STRING>>>>>>, counts ARRAY<STRUCT< count_name STRING, events ARRAY<STRUCT< category STRING, event_name STRING>>>> ) view_name : The name of the view that will be created. This view will be in the shared-prod project, in the analysis bucket, and so will be queryable at: sql `moz-fx-data-shared-prod`.analysis.{view_name} project : The project where the dataset is located. dataset : The dataset that must contain both the events_daily and event_types tables. funnels : An array of funnels that will be created. Each funnel has two parts: funnel_name : The name of the funnel is what the column representing the funnel will be named in the view. For example, with the value \"onboarding\" , the view can be selected as follows: sql SELECT onboarding FROM `moz-fx-data-shared-prod`.analysis.{view_name} funnel : The ordered series of steps that make up a funnel. Each step also has: step_name : Used to name the column within the funnel and represents whether the user completed that step on that day. For example, within onboarding a user may have completed_first_card as a step; this can be queried at sql SELECT onboarding.completed_first_step FROM `moz-fx-data-shared-prod`.analysis.{view_name} events : The set of events which indicate the user completed that step of the funnel. Most of the time this is a single event. Each event has a category and event_name . counts : An array of counts. Each count has two parts, similar to funnel steps: count_name : Used to name the column representing the event count. E.g. \"clicked_settings_count\" would be queried at sql SELECT clicked_settings_count FROM `moz-fx-data-shared-prod`.analysis.{view_name} events : The set of events you want to count. Each event has a category and event_name .","title":"Usage"},{"location":"mozfun/event_analysis/#recommended-pattern","text":"Because the view definitions themselves are not informative about the contents of the events fields, it is best to put your query immediately after the procedure invocation, rather than invoking the procedure and running a separate query. This STMO query is an example of doing so. This allows viewers of the query to easily interpret what the funnel and count columns represent.","title":"Recommended Pattern"},{"location":"mozfun/event_analysis/#structure-of-the-resulting-view","text":"The view will be created at `moz-fx-data-shared-prod`.analysis.{event_name}. The view will have a schema roughly matching the following: root |-- submission_date: date |-- client_id: string |-- {funnel_1_name}: record | |-- {funnel_step_1_name} boolean | |-- {funnel_step_2_name} boolean ... |-- {funnel_N_name}: record | |-- {funnel_step_M_name}: boolean |-- {count_1_name}: integer ... |-- {count_N_name}: integer ...dimensions...","title":"Structure of the Resulting View"},{"location":"mozfun/event_analysis/#funnels","text":"Each funnel will be a STRUCT with nested columns representing completion of each step The types of those columns are boolean, and represent whether the user completed that step on that day. STRUCT( completed_step_1 BOOLEAN, completed_step_2 BOOLEAN, ... ) AS funnel_name With one row per-user per-day, you can use COUNTIF(funnel_name.completed_step_N) to query these fields. See below for an example.","title":"Funnels"},{"location":"mozfun/event_analysis/#event-counts","text":"Each event count is simply an INT64 representing the number of times the user completed those events on that day. If there are multiple events represented within one count, the values are summed. For example, if you wanted to know the number of times a user opened or closed the app, you could create a single event count with those two events. event_count_name INT64","title":"Event Counts"},{"location":"mozfun/event_analysis/#examples","text":"The following creates a few fields: - collection_flow is a funnel for those that started creating a collection within Fenix, and then finished, either by adding those tabs to an existing collection or saving it as a new collection. - collection_flow_saved represents users who started the collection flow then saved it as a new collection. - number_of_collections_created is the number of collections created - number_of_collections_deleted is the number of collections deleted CALL mozfun.event_analysis.create_events_view( 'fenix_collection_funnels', 'moz-fx-data-shared-prod', 'org_mozilla_firefox', -- Funnels [ STRUCT( \"collection_flow\" AS funnel_name, [STRUCT( \"started_collection_creation\" AS step_name, [STRUCT('collections' AS category, 'tab_select_opened' AS event_name)] AS events), STRUCT( \"completed_collection_creation\" AS step_name, [STRUCT('collections' AS category, 'saved' AS event_name), STRUCT('collections' AS category, 'tabs_added' AS event_name)] AS events) ] AS funnel), STRUCT( \"collection_flow_saved\" AS funnel_name, [STRUCT( \"started_collection_creation\" AS step_name, [STRUCT('collections' AS category, 'tab_select_opened' AS event_name)] AS events), STRUCT( \"saved_collection\" AS step_name, [STRUCT('collections' AS category, 'saved' AS event_name)] AS events) ] AS funnel) ], -- Event Counts [ STRUCT( \"number_of_collections_created\" AS count_name, [STRUCT('collections' AS category, 'saved' AS event_name)] AS events ), STRUCT( \"number_of_collections_deleted\" AS count_name, [STRUCT('collections' AS category, 'removed' AS event_name)] AS events ) ] ); From there, you can query a few things. For example, the fraction of users who completed each step of the collection flow over time: SELECT submission_date, COUNTIF(collection_flow.started_collection_creation) / COUNT(*) AS started_collection_creation, COUNTIF(collection_flow.completed_collection_creation) / COUNT(*) AS completed_collection_creation, FROM `moz-fx-data-shared-prod`.analysis.fenix_collection_funnels WHERE submission_date >= DATE_SUB(current_date, INTERVAL 28 DAY) GROUP BY submission_date Or you can see the number of collections created and deleted: SELECT submission_date, SUM(number_of_collections_created) AS number_of_collections_created, SUM(number_of_collections_deleted) AS number_of_collections_deleted, FROM `moz-fx-data-shared-prod`.analysis.fenix_collection_funnels WHERE submission_date >= DATE_SUB(current_date, INTERVAL 28 DAY) GROUP BY submission_date Source | Edit","title":"Examples"},{"location":"mozfun/event_analysis/#extract_event_counts-udf","text":"Extract the events and their counts from an events string. This function explicitly ignores event properties, and retrieves just the counts of the top-level events.","title":"extract_event_counts (UDF)"},{"location":"mozfun/event_analysis/#usage_1","text":"extract_event_counts( events STRING ) events - A comma-separated events string, where each event is represented as a string of unicode chars.","title":"Usage"},{"location":"mozfun/event_analysis/#example","text":"See this dashboard for example usage. Source | Edit","title":"Example"},{"location":"mozfun/event_analysis/#extract_event_counts_with_properties-udf","text":"Extract events with event properties and their associated counts. Also extracts raw events and their counts. This allows for querying with and without properties in the same dashboard.","title":"extract_event_counts_with_properties (UDF)"},{"location":"mozfun/event_analysis/#usage_2","text":"extract_event_counts_with_properties( events STRING ) events - A comma-separated events string, where each event is represented as a string of unicode chars.","title":"Usage"},{"location":"mozfun/event_analysis/#example_1","text":"See this query for example usage.","title":"Example"},{"location":"mozfun/event_analysis/#caveats","text":"This function extracts both counts for events with each property, and for all events without their properties. This allows us to include both total counts for an event (with any property value), and events that don't have properties. Source | Edit","title":"Caveats"},{"location":"mozfun/glean/","text":"glean Functions for working with Glean data. timespan_seconds (UDF) Returns the number of seconds represented by a Glean timespan struct, rounded down to full seconds. See https://mozilla.github.io/glean/book/user/metrics/timespan.html Source | Edit timespan_nanos (UDF) Returns the number of nanoseconds represented by a Glean timespan struct. See https://mozilla.github.io/glean/book/user/metrics/timespan.html Source | Edit","title":"glean"},{"location":"mozfun/glean/#glean","text":"Functions for working with Glean data.","title":"glean"},{"location":"mozfun/glean/#timespan_seconds-udf","text":"Returns the number of seconds represented by a Glean timespan struct, rounded down to full seconds. See https://mozilla.github.io/glean/book/user/metrics/timespan.html Source | Edit","title":"timespan_seconds (UDF)"},{"location":"mozfun/glean/#timespan_nanos-udf","text":"Returns the number of nanoseconds represented by a Glean timespan struct. See https://mozilla.github.io/glean/book/user/metrics/timespan.html Source | Edit","title":"timespan_nanos (UDF)"},{"location":"mozfun/hist/","text":"hist Functions for working with string encodings of histograms from desktop telemetry. mean (UDF) Given histogram h, return floor(mean) of the measurements in the bucket. That is, the histogram sum divided by the number of measurements taken. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L292-L307 Source | Edit merge (UDF) Merge an array of histograms into a single histogram. The histogram values will be summed per-bucket The count will be summed Other fields will take the mode_last Source | Edit normalize (UDF) Normalize a histogram. Set sum to 1, and normalize to 1 the histogram bucket counts. Source | Edit percentiles (UDF) Given histogram and list of percentiles,calculate what those percentiles are for the histogram. If the histogram is empty, returns NULL. Source | Edit threshold_count (UDF) Return the number of recorded observations greater than threshold for the histogram. CAUTION: Does not count any buckets that have any values less than the threshold. For example, a bucket with range (1, 10) will not be counted for a threshold of 2. Use threshold that are not bucket boundaries with caution. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L213-L239 Source | Edit extract (UDF) Return a parsed struct from a string-encoded histogram. We support a variety of compact encodings as well as the classic JSON representation as sent in main pings. The built-in BigQuery JSON parsing functions are not powerful enough to handle all the logic here, so we resort to some string processing. This function could behave unexpectedly on poorly-formatted histogram JSON, but we expect that payload validation in the data pipeline should ensure that histograms are well formed, which gives us some flexibility. For more on desktop telemetry histogram structure, see: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/collection/histograms.html The compact encodings were originally proposed in: https://docs.google.com/document/d/1k_ji_1DB6htgtXnPpMpa7gX0klm-DGV5NMY7KkvVB00/edit# SELECT mozfun.hist.extract( '{\"bucket_count\":3,\"histogram_type\":4,\"sum\":1,\"range\":[1,2],\"values\":{\"0\":1,\"1\":0}}' ).sum -- 1 SELECT mozfun.hist.extract('5').sum -- 5 Source | Edit string_to_json (UDF) Convert a histogram string (in JSON or compact format) to a full histogram JSON blob. Source | Edit","title":"hist"},{"location":"mozfun/hist/#hist","text":"Functions for working with string encodings of histograms from desktop telemetry.","title":"hist"},{"location":"mozfun/hist/#mean-udf","text":"Given histogram h, return floor(mean) of the measurements in the bucket. That is, the histogram sum divided by the number of measurements taken. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L292-L307 Source | Edit","title":"mean (UDF)"},{"location":"mozfun/hist/#merge-udf","text":"Merge an array of histograms into a single histogram. The histogram values will be summed per-bucket The count will be summed Other fields will take the mode_last Source | Edit","title":"merge (UDF)"},{"location":"mozfun/hist/#normalize-udf","text":"Normalize a histogram. Set sum to 1, and normalize to 1 the histogram bucket counts. Source | Edit","title":"normalize (UDF)"},{"location":"mozfun/hist/#percentiles-udf","text":"Given histogram and list of percentiles,calculate what those percentiles are for the histogram. If the histogram is empty, returns NULL. Source | Edit","title":"percentiles (UDF)"},{"location":"mozfun/hist/#threshold_count-udf","text":"Return the number of recorded observations greater than threshold for the histogram. CAUTION: Does not count any buckets that have any values less than the threshold. For example, a bucket with range (1, 10) will not be counted for a threshold of 2. Use threshold that are not bucket boundaries with caution. https://github.com/mozilla/telemetry-batch-view/blob/ea0733c/src/main/scala/com/mozilla/telemetry/utils/MainPing.scala#L213-L239 Source | Edit","title":"threshold_count (UDF)"},{"location":"mozfun/hist/#extract-udf","text":"Return a parsed struct from a string-encoded histogram. We support a variety of compact encodings as well as the classic JSON representation as sent in main pings. The built-in BigQuery JSON parsing functions are not powerful enough to handle all the logic here, so we resort to some string processing. This function could behave unexpectedly on poorly-formatted histogram JSON, but we expect that payload validation in the data pipeline should ensure that histograms are well formed, which gives us some flexibility. For more on desktop telemetry histogram structure, see: https://firefox-source-docs.mozilla.org/toolkit/components/telemetry/collection/histograms.html The compact encodings were originally proposed in: https://docs.google.com/document/d/1k_ji_1DB6htgtXnPpMpa7gX0klm-DGV5NMY7KkvVB00/edit# SELECT mozfun.hist.extract( '{\"bucket_count\":3,\"histogram_type\":4,\"sum\":1,\"range\":[1,2],\"values\":{\"0\":1,\"1\":0}}' ).sum -- 1 SELECT mozfun.hist.extract('5').sum -- 5 Source | Edit","title":"extract (UDF)"},{"location":"mozfun/hist/#string_to_json-udf","text":"Convert a histogram string (in JSON or compact format) to a full histogram JSON blob. Source | Edit","title":"string_to_json (UDF)"},{"location":"mozfun/json/","text":"json Functions for parsing Mozilla-specific JSON data types. mode_last (UDF) Returns the most frequently occuring element in an array of json-compatible elements. In the case of multiple values tied for the highest count, it returns the value that appears latest in the array. Nulls are ignored. Source | Edit extract_int_map (UDF) Returns an array of key/value structs from a string representing a JSON map. Both keys and values are cast to integers. This is the format for the \"values\" field in the desktop telemetry histogram JSON representation. Source | Edit","title":"json"},{"location":"mozfun/json/#json","text":"Functions for parsing Mozilla-specific JSON data types.","title":"json"},{"location":"mozfun/json/#mode_last-udf","text":"Returns the most frequently occuring element in an array of json-compatible elements. In the case of multiple values tied for the highest count, it returns the value that appears latest in the array. Nulls are ignored. Source | Edit","title":"mode_last (UDF)"},{"location":"mozfun/json/#extract_int_map-udf","text":"Returns an array of key/value structs from a string representing a JSON map. Both keys and values are cast to integers. This is the format for the \"values\" field in the desktop telemetry histogram JSON representation. Source | Edit","title":"extract_int_map (UDF)"},{"location":"mozfun/map/","text":"map Functions for working with arrays of key/value structs. get_key_with_null (UDF) Fetch the value associated with a given key from an array of key/value structs. Because map types aren't available in BigQuery, we model maps as arrays of structs instead, and this function provides map-like access to such fields. This version matches NULL keys as well. Source | Edit mode_last (UDF) Combine entries from multiple maps, determine the value for each key using mozfun.stats.mode_last. Source | Edit sum (UDF) Return the sum of values by key in an array of map entries. The expected schema for entries is ARRAY >, where the type for value must be supported by SUM, which allows numeric data types INT64, NUMERIC, and FLOAT64. Source | Edit get_key (UDF) Fetch the value associated with a given key from an array of key/value structs. Because map types aren't available in BigQuery, we model maps as arrays of structs instead, and this function provides map-like access to such fields. Source | Edit","title":"map"},{"location":"mozfun/map/#map","text":"Functions for working with arrays of key/value structs.","title":"map"},{"location":"mozfun/map/#get_key_with_null-udf","text":"Fetch the value associated with a given key from an array of key/value structs. Because map types aren't available in BigQuery, we model maps as arrays of structs instead, and this function provides map-like access to such fields. This version matches NULL keys as well. Source | Edit","title":"get_key_with_null (UDF)"},{"location":"mozfun/map/#mode_last-udf","text":"Combine entries from multiple maps, determine the value for each key using mozfun.stats.mode_last. Source | Edit","title":"mode_last (UDF)"},{"location":"mozfun/map/#sum-udf","text":"Return the sum of values by key in an array of map entries. The expected schema for entries is ARRAY >, where the type for value must be supported by SUM, which allows numeric data types INT64, NUMERIC, and FLOAT64. Source | Edit","title":"sum (UDF)"},{"location":"mozfun/map/#get_key-udf","text":"Fetch the value associated with a given key from an array of key/value structs. Because map types aren't available in BigQuery, we model maps as arrays of structs instead, and this function provides map-like access to such fields. Source | Edit","title":"get_key (UDF)"},{"location":"mozfun/norm/","text":"norm Functions for normalizing data. glean_baseline_client_info (UDF) Accepts a glean client_info struct as input and returns a modified struct that includes a few parsed or normalized variants of the input fields. Source | Edit glean_ping_info (UDF) Accepts a glean ping_info struct as input and returns a modified struct that includes a few parsed or normalized variants of the input fields. Source | Edit product_info (UDF) Returns a normalized product name and a canonical_name for a product based on the raw app_name and normalized_os values that appear in pings. The returned product name is intended to be readable and unambiguous, but short and easy to type. This value is suitable for use as a key in derived tables. The returned canonical_name is more verbose and is suited for displaying in visualizations. The returned struct also contains boolean contributes_to_2020_kpi as the canonical reference for whether the given application is included in KPI reporting. Additional fields may be added for future years. The normalized_os value that's passed in should be the top-level normalized_os value present in any ping table or you may want to wrap a raw value in mozfun.norm.os like mozfun.norm.product_info(app_name, mozfun.norm.os(os)) . For legacy telemetry pings like main ping for desktop and core ping for mobile products, app_name should come from the submission URI (stored as metadata.uri.app_name in BigQuery ping tables). For Glean pings, the concept of an app_name doesn't exist, since pings from different applications are routed to different BigQuery datasets. Instead, the app_name send in for Glean pings should be the same value as what's expected for product . So, a view on top of pings from Fenix should pass in \"Fenix\" for app_name . This function also tolerates passing in a product value as app_name so that this function is still useful for derived tables which have thrown away the raw app_name value. The mappings are as follows: app_name normalized_os product canonical_name 2019 2020 Firefox * Firefox Firefox for Desktop true true Fenix Android Fenix Firefox for Android (Fenix) true true Fennec Android Fennec Firefox for Android (Fennec) true true Firefox Preview Android Firefox Preview Firefox Preview for Android true true Fennec iOS Firefox iOS Firefox for iOS true true FirefoxForFireTV Android Firefox Fire TV Firefox for Fire TV false false FirefoxConnect Android Firefox Echo Firefox for Echo Show true true Zerda Android Firefox Lite Firefox Lite true true Zerda_cn Android Firefox Lite CN Firefox Lite (China) false false Focus Android Focus Android Firefox Focus for Android true true Focus iOS Focus iOS Firefox Focus for iOS true true Klar Android Klar Android Firefox Klar for Android false false Klar iOS Klar iOS Firefox Klar for iOS false false Lockbox Android Lockwise Android Lockwise for Android true true Lockbox iOS Lockwise iOS Lockwise for iOS true true FirefoxReality* Android Firefox Reality Firefox Reality false false Source Edit os (UDF) Normalize an operating system string to one of the three major desktop platforms, one of the two major mobile platforms, or \"Other\". This is a reimplementation of logic used in the data pipeline > to populate normalized_os . Source | Edit metadata (UDF) Accepts a pipeline metadata struct as input and returns a modified struct that includes a few parsed or normalized variants of the input metadata fields. Source | Edit fenix_app_info (UDF) Returns canonical, human-understandable identification info for Fenix sources. The Glean telemetry library for Android by design routes pings based on the Play Store appId value of the published application. As of August 2020, there have been 5 separate Play Store appId values associated with different builds of Fenix, each corresponding to different datasets in BigQuery, and the mapping of appId to logical app names (Firefox vs. Firefox Preview) and channel names (nightly, beta, or release) has changed over time; see the spreadsheet of naming history for Mozilla's mobile browsers .> This function is intended as the source of truth for how to map a specific ping in BigQuery to a logical app names and channel. It should be expected that the output of this function may evolve over time. If we rename a product or channel, we may choose to update the values here so that analyses consistently get the new name. The first argument ( app_id ) can be fairly fuzzy; it is tolerant of actual Google Play Store appId values like 'org.mozilla.firefox_beta' (mix of periods and underscores) as well as BigQuery dataset names with suffixes like 'org_mozilla_firefox_beta_stable'. The second argument ( app_build_id ) should be the value in client_info.app_build. The function returns a STRUCT that contains the logical app_name and channel as well as the Play Store app_id in the canonical form which would appear in Play Store URLs. Note that the naming of Fenix applications changed on 2020-07-03, so to get a continuous view of the pings associated with a logical app channel, you may need to union together tables from multiple BigQuery datasets. To see data for all Fenix channels together, it is necessary to union together tables from all 5 datasets. For basic usage information, consider using telemetry.fenix_clients_last_seen which already handles the union. Otherwise, see the example below as a template for how construct a custom union. Mapping of channels to datasets: release: org_mozilla_firefox beta: org_mozilla_firefox_beta (current) and org_mozilla_fenix nightly: org_mozilla_fenix (current), org_mozilla_fennec_aurora , and org_mozilla_fenix_nightly -- Example of a query over all Fenix builds advertised as \"Firefox Beta\" CREATE TEMP FUNCTION extract_fields(app_id STRING, m ANY TYPE) AS ( ( SELECT AS STRUCT m.submission_timestamp, m.metrics.string.geckoview_version, mozfun.norm.fenix_app_info(app_id, m.client_info.app_build).* ) ); WITH base AS ( SELECT extract_fields('org_mozilla_firefox_beta', m).* FROM org_mozilla_firefox_beta.metrics AS m UNION ALL SELECT extract_fields('org_mozilla_fenix', m).* FROM org_mozilla_fenix.metrics AS m ) SELECT DATE(submission_timestamp) AS submission_date, geckoview_version, COUNT(*) FROM base WHERE app_name = 'Fenix' -- excludes 'Firefox Preview' AND channel = 'beta' AND DATE(submission_timestamp) = '2020-08-01' GROUP BY submission_date, geckoview_version Source | Edit","title":"norm"},{"location":"mozfun/norm/#norm","text":"Functions for normalizing data.","title":"norm"},{"location":"mozfun/norm/#glean_baseline_client_info-udf","text":"Accepts a glean client_info struct as input and returns a modified struct that includes a few parsed or normalized variants of the input fields. Source | Edit","title":"glean_baseline_client_info (UDF)"},{"location":"mozfun/norm/#glean_ping_info-udf","text":"Accepts a glean ping_info struct as input and returns a modified struct that includes a few parsed or normalized variants of the input fields. Source | Edit","title":"glean_ping_info (UDF)"},{"location":"mozfun/norm/#product_info-udf","text":"Returns a normalized product name and a canonical_name for a product based on the raw app_name and normalized_os values that appear in pings. The returned product name is intended to be readable and unambiguous, but short and easy to type. This value is suitable for use as a key in derived tables. The returned canonical_name is more verbose and is suited for displaying in visualizations. The returned struct also contains boolean contributes_to_2020_kpi as the canonical reference for whether the given application is included in KPI reporting. Additional fields may be added for future years. The normalized_os value that's passed in should be the top-level normalized_os value present in any ping table or you may want to wrap a raw value in mozfun.norm.os like mozfun.norm.product_info(app_name, mozfun.norm.os(os)) . For legacy telemetry pings like main ping for desktop and core ping for mobile products, app_name should come from the submission URI (stored as metadata.uri.app_name in BigQuery ping tables). For Glean pings, the concept of an app_name doesn't exist, since pings from different applications are routed to different BigQuery datasets. Instead, the app_name send in for Glean pings should be the same value as what's expected for product . So, a view on top of pings from Fenix should pass in \"Fenix\" for app_name . This function also tolerates passing in a product value as app_name so that this function is still useful for derived tables which have thrown away the raw app_name value. The mappings are as follows: app_name normalized_os product canonical_name 2019 2020 Firefox * Firefox Firefox for Desktop true true Fenix Android Fenix Firefox for Android (Fenix) true true Fennec Android Fennec Firefox for Android (Fennec) true true Firefox Preview Android Firefox Preview Firefox Preview for Android true true Fennec iOS Firefox iOS Firefox for iOS true true FirefoxForFireTV Android Firefox Fire TV Firefox for Fire TV false false FirefoxConnect Android Firefox Echo Firefox for Echo Show true true Zerda Android Firefox Lite Firefox Lite true true Zerda_cn Android Firefox Lite CN Firefox Lite (China) false false Focus Android Focus Android Firefox Focus for Android true true Focus iOS Focus iOS Firefox Focus for iOS true true Klar Android Klar Android Firefox Klar for Android false false Klar iOS Klar iOS Firefox Klar for iOS false false Lockbox Android Lockwise Android Lockwise for Android true true Lockbox iOS Lockwise iOS Lockwise for iOS true true FirefoxReality* Android Firefox Reality Firefox Reality false false Source Edit","title":"product_info (UDF)"},{"location":"mozfun/norm/#os-udf","text":"Normalize an operating system string to one of the three major desktop platforms, one of the two major mobile platforms, or \"Other\". This is a reimplementation of logic used in the data pipeline > to populate normalized_os . Source | Edit","title":"os (UDF)"},{"location":"mozfun/norm/#metadata-udf","text":"Accepts a pipeline metadata struct as input and returns a modified struct that includes a few parsed or normalized variants of the input metadata fields. Source | Edit","title":"metadata (UDF)"},{"location":"mozfun/norm/#fenix_app_info-udf","text":"Returns canonical, human-understandable identification info for Fenix sources. The Glean telemetry library for Android by design routes pings based on the Play Store appId value of the published application. As of August 2020, there have been 5 separate Play Store appId values associated with different builds of Fenix, each corresponding to different datasets in BigQuery, and the mapping of appId to logical app names (Firefox vs. Firefox Preview) and channel names (nightly, beta, or release) has changed over time; see the spreadsheet of naming history for Mozilla's mobile browsers .> This function is intended as the source of truth for how to map a specific ping in BigQuery to a logical app names and channel. It should be expected that the output of this function may evolve over time. If we rename a product or channel, we may choose to update the values here so that analyses consistently get the new name. The first argument ( app_id ) can be fairly fuzzy; it is tolerant of actual Google Play Store appId values like 'org.mozilla.firefox_beta' (mix of periods and underscores) as well as BigQuery dataset names with suffixes like 'org_mozilla_firefox_beta_stable'. The second argument ( app_build_id ) should be the value in client_info.app_build. The function returns a STRUCT that contains the logical app_name and channel as well as the Play Store app_id in the canonical form which would appear in Play Store URLs. Note that the naming of Fenix applications changed on 2020-07-03, so to get a continuous view of the pings associated with a logical app channel, you may need to union together tables from multiple BigQuery datasets. To see data for all Fenix channels together, it is necessary to union together tables from all 5 datasets. For basic usage information, consider using telemetry.fenix_clients_last_seen which already handles the union. Otherwise, see the example below as a template for how construct a custom union. Mapping of channels to datasets: release: org_mozilla_firefox beta: org_mozilla_firefox_beta (current) and org_mozilla_fenix nightly: org_mozilla_fenix (current), org_mozilla_fennec_aurora , and org_mozilla_fenix_nightly -- Example of a query over all Fenix builds advertised as \"Firefox Beta\" CREATE TEMP FUNCTION extract_fields(app_id STRING, m ANY TYPE) AS ( ( SELECT AS STRUCT m.submission_timestamp, m.metrics.string.geckoview_version, mozfun.norm.fenix_app_info(app_id, m.client_info.app_build).* ) ); WITH base AS ( SELECT extract_fields('org_mozilla_firefox_beta', m).* FROM org_mozilla_firefox_beta.metrics AS m UNION ALL SELECT extract_fields('org_mozilla_fenix', m).* FROM org_mozilla_fenix.metrics AS m ) SELECT DATE(submission_timestamp) AS submission_date, geckoview_version, COUNT(*) FROM base WHERE app_name = 'Fenix' -- excludes 'Firefox Preview' AND channel = 'beta' AND DATE(submission_timestamp) = '2020-08-01' GROUP BY submission_date, geckoview_version Source | Edit","title":"fenix_app_info (UDF)"},{"location":"mozfun/stats/","text":"stats Statistics functions. mode_last_retain_nulls (UDF) Returns the most frequently occuring element in an array. In the case of multiple values tied for the highest count, it returns the value that appears latest in the array. Nulls are retained. See also: `stats.mode_last, which ignores nulls. Source | Edit mode_last (UDF) Returns the most frequently occuring element in an array. In the case of multiple values tied for the highest count, it returns the value that appears latest in the array. Nulls are ignored. See also: stats.mode_last_retain_nulls , which retains nulls. Source | Edit","title":"stats"},{"location":"mozfun/stats/#stats","text":"Statistics functions.","title":"stats"},{"location":"mozfun/stats/#mode_last_retain_nulls-udf","text":"Returns the most frequently occuring element in an array. In the case of multiple values tied for the highest count, it returns the value that appears latest in the array. Nulls are retained. See also: `stats.mode_last, which ignores nulls. Source | Edit","title":"mode_last_retain_nulls (UDF)"},{"location":"mozfun/stats/#mode_last-udf","text":"Returns the most frequently occuring element in an array. In the case of multiple values tied for the highest count, it returns the value that appears latest in the array. Nulls are ignored. See also: stats.mode_last_retain_nulls , which retains nulls. Source | Edit","title":"mode_last (UDF)"}]}